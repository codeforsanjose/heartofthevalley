{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport WebMercatorViewport, { normalizeViewportProps } from 'viewport-mercator-project';\nimport { clamp } from './math-utils';\nimport assert from './assert';\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 85\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\n\nvar MapState = function () {\n  function MapState(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n        transitionDuration = _ref.transitionDuration,\n        transitionEasing = _ref.transitionEasing,\n        transitionInterpolator = _ref.transitionInterpolator,\n        transitionInterruption = _ref.transitionInterruption,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, MapState);\n\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    this._viewportProps = this._applyConstraints({\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      transitionDuration: transitionDuration,\n      transitionEasing: transitionEasing,\n      transitionInterpolator: transitionInterpolator,\n      transitionInterruption: transitionInterruption\n    });\n    this._state = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n  }\n\n  _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedMapState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n        startPanLngLat: startPanLngLat,\n        pos: pos\n      }),\n          _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n          longitude = _this$_calculateNewLn2[0],\n          latitude = _this$_calculateNewLn2[1];\n\n      return this._getUpdatedMapState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedMapState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedMapState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        newRotation = this._calculateNewPitchAndBearing(_objectSpread(_objectSpread({}, this._getRotationParams(pos, startRotatePos)), {}, {\n          startBearing: startBearing,\n          startPitch: startPitch\n        }));\n      } else {\n        newRotation = {\n          bearing: startBearing + deltaAngleX,\n          pitch: startPitch + deltaAngleY\n        };\n      }\n\n      return this._getUpdatedMapState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedMapState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedMapState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      assert(scale > 0, '`scale` must be a positive number');\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomLngLat = _this$_state2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      assert(startZoomLngLat, '`startZoomLngLat` prop is required ' + 'for zoom behavior to calculate where to position the map.');\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom || 0\n      });\n\n      var zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {\n        zoom: zoom\n      }));\n\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n        lngLat: startZoomLngLat,\n        pos: pos\n      }),\n          _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n          longitude = _zoomedViewport$getMa2[0],\n          latitude = _zoomedViewport$getMa2[1];\n\n      return this._getUpdatedMapState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedMapState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"_getUpdatedMapState\",\n    value: function _getUpdatedMapState(newProps) {\n      return new MapState(Object.assign({}, this._viewportProps, this._state, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n          pos = _ref8.pos;\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n          startZoom = _ref9.startZoom;\n      var _this$_viewportProps = this._viewportProps,\n          maxZoom = _this$_viewportProps.maxZoom,\n          minZoom = _this$_viewportProps.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n          deltaScaleY = _ref10.deltaScaleY,\n          startBearing = _ref10.startBearing,\n          startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps2 = this._viewportProps,\n          minPitch = _this$_viewportProps2.minPitch,\n          maxPitch = _this$_viewportProps2.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"_getRotationParams\",\n    value: function _getRotationParams(pos, startPos) {\n      var deltaX = pos[0] - startPos[0];\n      var deltaY = pos[1] - startPos[1];\n      var centerY = pos[1];\n      var startY = startPos[1];\n      var _this$_viewportProps3 = this._viewportProps,\n          width = _this$_viewportProps3.width,\n          height = _this$_viewportProps3.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      return {\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      };\n    }\n  }]);\n\n  return MapState;\n}();\n\nexport { MapState as default };","map":{"version":3,"mappings":"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","names":["WebMercatorViewport","normalizeViewportProps","clamp","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","_classCallCheck","Number","isFinite","_viewportProps","_applyConstraints","_state","pos","_getUpdatedMapState","_unproject","startPos","_calculateNewLngLat","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","scale","_calculateNewZoom","zoomedViewport","Object","assign","getMapCenterByLngLatPosition","lngLat","newProps","props","viewport","unproject","Math","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","abs","min","max"],"sources":["../../../src/utils/map-state.js"],"sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 85\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport default class MapState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Cursor position when the rotate operation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Start panning\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer is\n   * @param {[Number, Number]} [params.startPos] - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({\n      startPanLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   * @param {Number} params.deltaAngleX - the change to bearing.\n   * @param {Number} params.deltaAngleY - the change to pitch.\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedMapState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the current center is\n   * @param {[Number, Number]} [params.startPos] - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} params.scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({\n      lngLat: startPanLngLat,\n      pos\n    });\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}