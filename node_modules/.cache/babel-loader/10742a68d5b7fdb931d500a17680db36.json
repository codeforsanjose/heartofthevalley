{"ast":null,"code":"/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function (window, document, exportName, undefined) {\n  'use strict';\n\n  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n  var TEST_ELEMENT = document.createElement('div');\n  var TYPE_FUNCTION = 'function';\n  var round = Math.round;\n  var abs = Math.abs;\n  var now = Date.now;\n  /**\n   * set a timeout with a given scope\n   * @param {Function} fn\n   * @param {Number} timeout\n   * @param {Object} context\n   * @returns {number}\n   */\n\n  function setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n  }\n  /**\n   * if the argument is an array, we want to execute the fn on each entry\n   * if it aint an array we don't want to do a thing.\n   * this is used by all the methods that accept a single and array argument.\n   * @param {*|Array} arg\n   * @param {String} fn\n   * @param {Object} [context]\n   * @returns {Boolean}\n   */\n\n\n  function invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n      each(arg, context[fn], context);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * walk objects and arrays\n   * @param {Object} obj\n   * @param {Function} iterator\n   * @param {Object} context\n   */\n\n\n  function each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n      return;\n    }\n\n    if (obj.forEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n      i = 0;\n\n      while (i < obj.length) {\n        iterator.call(context, obj[i], i, obj);\n        i++;\n      }\n    } else {\n      for (i in obj) {\n        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n      }\n    }\n  }\n  /**\n   * wrap a method with a deprecation warning and stack trace\n   * @param {Function} method\n   * @param {String} name\n   * @param {String} message\n   * @returns {Function} A new function wrapping the supplied method.\n   */\n\n\n  function deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function () {\n      var e = new Error('get-stack-trace');\n      var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n      var log = window.console && (window.console.warn || window.console.log);\n\n      if (log) {\n        log.call(window.console, deprecationMessage, stack);\n      }\n\n      return method.apply(this, arguments);\n    };\n  }\n  /**\n   * extend object.\n   * means that properties in dest will be overwritten by the ones in src.\n   * @param {Object} target\n   * @param {...Object} objects_to_assign\n   * @returns {Object} target\n   */\n\n\n  var assign;\n\n  if (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var output = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n\n        if (source !== undefined && source !== null) {\n          for (var nextKey in source) {\n            if (source.hasOwnProperty(nextKey)) {\n              output[nextKey] = source[nextKey];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  } else {\n    assign = Object.assign;\n  }\n  /**\n   * extend object.\n   * means that properties in dest will be overwritten by the ones in src.\n   * @param {Object} dest\n   * @param {Object} src\n   * @param {Boolean} [merge=false]\n   * @returns {Object} dest\n   */\n\n\n  var extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n\n    while (i < keys.length) {\n      if (!merge || merge && dest[keys[i]] === undefined) {\n        dest[keys[i]] = src[keys[i]];\n      }\n\n      i++;\n    }\n\n    return dest;\n  }, 'extend', 'Use `assign`.');\n  /**\n   * merge the values from src in the dest.\n   * means that properties that exist in dest will not be overwritten by src\n   * @param {Object} dest\n   * @param {Object} src\n   * @returns {Object} dest\n   */\n\n  var merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n  }, 'merge', 'Use `assign`.');\n  /**\n   * simple class inheritance\n   * @param {Function} child\n   * @param {Function} base\n   * @param {Object} [properties]\n   */\n\n  function inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n      assign(childP, properties);\n    }\n  }\n  /**\n   * simple function bind\n   * @param {Function} fn\n   * @param {Object} context\n   * @returns {Function}\n   */\n\n\n  function bindFn(fn, context) {\n    return function boundFn() {\n      return fn.apply(context, arguments);\n    };\n  }\n  /**\n   * let a boolean value also be a function that must return a boolean\n   * this first item in args will be used as the context\n   * @param {Boolean|Function} val\n   * @param {Array} [args]\n   * @returns {Boolean}\n   */\n\n\n  function boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n      return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n\n    return val;\n  }\n  /**\n   * use the val2 when val1 is undefined\n   * @param {*} val1\n   * @param {*} val2\n   * @returns {*}\n   */\n\n\n  function ifUndefined(val1, val2) {\n    return val1 === undefined ? val2 : val1;\n  }\n  /**\n   * addEventListener with multiple events at once\n   * @param {EventTarget} target\n   * @param {String} types\n   * @param {Function} handler\n   */\n\n\n  function addEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.addEventListener(type, handler, false);\n    });\n  }\n  /**\n   * removeEventListener with multiple events at once\n   * @param {EventTarget} target\n   * @param {String} types\n   * @param {Function} handler\n   */\n\n\n  function removeEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.removeEventListener(type, handler, false);\n    });\n  }\n  /**\n   * find if a node is in the given parent\n   * @method hasParent\n   * @param {HTMLElement} node\n   * @param {HTMLElement} parent\n   * @return {Boolean} found\n   */\n\n\n  function hasParent(node, parent) {\n    while (node) {\n      if (node == parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  }\n  /**\n   * small indexOf wrapper\n   * @param {String} str\n   * @param {String} find\n   * @returns {Boolean} found\n   */\n\n\n  function inStr(str, find) {\n    return str.indexOf(find) > -1;\n  }\n  /**\n   * split string on whitespace\n   * @param {String} str\n   * @returns {Array} words\n   */\n\n\n  function splitStr(str) {\n    return str.trim().split(/\\s+/g);\n  }\n  /**\n   * find if a array contains the object using indexOf or a simple polyFill\n   * @param {Array} src\n   * @param {String} find\n   * @param {String} [findByKey]\n   * @return {Boolean|Number} false when not found, or the index\n   */\n\n\n  function inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n      return src.indexOf(find);\n    } else {\n      var i = 0;\n\n      while (i < src.length) {\n        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n          return i;\n        }\n\n        i++;\n      }\n\n      return -1;\n    }\n  }\n  /**\n   * convert array-like objects to real arrays\n   * @param {Object} obj\n   * @returns {Array}\n   */\n\n\n  function toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n  }\n  /**\n   * unique array with objects based on a key (like 'id') or just by the array's value\n   * @param {Array} src [{id:1},{id:2},{id:1}]\n   * @param {String} [key]\n   * @param {Boolean} [sort=False]\n   * @returns {Array} [{id:1},{id:2}]\n   */\n\n\n  function uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n      var val = key ? src[i][key] : src[i];\n\n      if (inArray(values, val) < 0) {\n        results.push(src[i]);\n      }\n\n      values[i] = val;\n      i++;\n    }\n\n    if (sort) {\n      if (!key) {\n        results = results.sort();\n      } else {\n        results = results.sort(function sortUniqueArray(a, b) {\n          return a[key] > b[key];\n        });\n      }\n    }\n\n    return results;\n  }\n  /**\n   * get the prefixed property\n   * @param {Object} obj\n   * @param {String} property\n   * @returns {String|Undefined} prefixed\n   */\n\n\n  function prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n    var i = 0;\n\n    while (i < VENDOR_PREFIXES.length) {\n      prefix = VENDOR_PREFIXES[i];\n      prop = prefix ? prefix + camelProp : property;\n\n      if (prop in obj) {\n        return prop;\n      }\n\n      i++;\n    }\n\n    return undefined;\n  }\n  /**\n   * get a unique id\n   * @returns {number} uniqueId\n   */\n\n\n  var _uniqueId = 1;\n\n  function uniqueId() {\n    return _uniqueId++;\n  }\n  /**\n   * get the window object of an element\n   * @param {HTMLElement} element\n   * @returns {DocumentView|Window}\n   */\n\n\n  function getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return doc.defaultView || doc.parentWindow || window;\n  }\n\n  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n  var SUPPORT_TOUCH = ('ontouchstart' in window);\n  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n  var INPUT_TYPE_TOUCH = 'touch';\n  var INPUT_TYPE_PEN = 'pen';\n  var INPUT_TYPE_MOUSE = 'mouse';\n  var INPUT_TYPE_KINECT = 'kinect';\n  var COMPUTE_INTERVAL = 25;\n  var INPUT_START = 1;\n  var INPUT_MOVE = 2;\n  var INPUT_END = 4;\n  var INPUT_CANCEL = 8;\n  var DIRECTION_NONE = 1;\n  var DIRECTION_LEFT = 2;\n  var DIRECTION_RIGHT = 4;\n  var DIRECTION_UP = 8;\n  var DIRECTION_DOWN = 16;\n  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n  var PROPS_XY = ['x', 'y'];\n  var PROPS_CLIENT_XY = ['clientX', 'clientY'];\n  /**\n   * create new input type manager\n   * @param {Manager} manager\n   * @param {Function} callback\n   * @returns {Input}\n   * @constructor\n   */\n\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n\n  Input.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function () {},\n\n    /**\n     * bind the events\n     */\n    init: function () {\n      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function () {\n      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n  };\n  /**\n   * create new input type manager\n   * called by the Manager constructor\n   * @param {Hammer} manager\n   * @returns {Input}\n   */\n\n  function createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n      Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n      Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n      Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n      Type = MouseInput;\n    } else {\n      Type = TouchMouseInput;\n    }\n\n    return new Type(manager, inputHandler);\n  }\n  /**\n   * handle input events\n   * @param {Manager} manager\n   * @param {String} eventType\n   * @param {Object} input\n   */\n\n\n  function inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n      manager.session = {};\n    } // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n\n\n    input.eventType = eventType; // compute scale, rotation etc\n\n    computeInputData(manager, input); // emit secret event\n\n    manager.emit('hammer.input', input);\n    manager.recognize(input);\n    manager.session.prevInput = input;\n  }\n  /**\n   * extend the data with some usable properties like scale, rotate, velocity etc\n   * @param {Object} manager\n   * @param {Object} input\n   */\n\n\n  function computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n    if (!session.firstInput) {\n      session.firstInput = simpleCloneInputData(input);\n    } // to compute scale and rotation we need to store the multiple touches\n\n\n    if (pointersLength > 1 && !session.firstMultiple) {\n      session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n      session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n    computeIntervalInputData(session, input); // find the correct target\n\n    var target = manager.element;\n\n    if (hasParent(input.srcEvent.target, target)) {\n      target = input.srcEvent.target;\n    }\n\n    input.target = target;\n  }\n\n  function computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n      prevDelta = session.prevDelta = {\n        x: prevInput.deltaX || 0,\n        y: prevInput.deltaY || 0\n      };\n      offset = session.offsetDelta = {\n        x: center.x,\n        y: center.y\n      };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n  }\n  /**\n   * velocity is calculated every x ms\n   * @param {Object} session\n   * @param {Object} input\n   */\n\n\n  function computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity,\n        velocityX,\n        velocityY,\n        direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n      var deltaX = input.deltaX - last.deltaX;\n      var deltaY = input.deltaY - last.deltaY;\n      var v = getVelocity(deltaTime, deltaX, deltaY);\n      velocityX = v.x;\n      velocityY = v.y;\n      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n      direction = getDirection(deltaX, deltaY);\n      session.lastInterval = input;\n    } else {\n      // use latest velocity info if it doesn't overtake a minimum period\n      velocity = last.velocity;\n      velocityX = last.velocityX;\n      velocityY = last.velocityY;\n      direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n  }\n  /**\n   * create a simple clone from the input used for storage of firstInput and firstMultiple\n   * @param {Object} input\n   * @returns {Object} clonedInputData\n   */\n\n\n  function simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n\n    while (i < input.pointers.length) {\n      pointers[i] = {\n        clientX: round(input.pointers[i].clientX),\n        clientY: round(input.pointers[i].clientY)\n      };\n      i++;\n    }\n\n    return {\n      timeStamp: now(),\n      pointers: pointers,\n      center: getCenter(pointers),\n      deltaX: input.deltaX,\n      deltaY: input.deltaY\n    };\n  }\n  /**\n   * get the center of all the pointers\n   * @param {Array} pointers\n   * @return {Object} center contains `x` and `y` properties\n   */\n\n\n  function getCenter(pointers) {\n    var pointersLength = pointers.length; // no need to loop when only one touch\n\n    if (pointersLength === 1) {\n      return {\n        x: round(pointers[0].clientX),\n        y: round(pointers[0].clientY)\n      };\n    }\n\n    var x = 0,\n        y = 0,\n        i = 0;\n\n    while (i < pointersLength) {\n      x += pointers[i].clientX;\n      y += pointers[i].clientY;\n      i++;\n    }\n\n    return {\n      x: round(x / pointersLength),\n      y: round(y / pointersLength)\n    };\n  }\n  /**\n   * calculate the velocity between two points. unit is in px per ms.\n   * @param {Number} deltaTime\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Object} velocity `x` and `y`\n   */\n\n\n  function getVelocity(deltaTime, x, y) {\n    return {\n      x: x / deltaTime || 0,\n      y: y / deltaTime || 0\n    };\n  }\n  /**\n   * get the direction between two points\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Number} direction\n   */\n\n\n  function getDirection(x, y) {\n    if (x === y) {\n      return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n  }\n  /**\n   * calculate the absolute distance between two points\n   * @param {Object} p1 {x, y}\n   * @param {Object} p2 {x, y}\n   * @param {Array} [props] containing x and y keys\n   * @return {Number} distance\n   */\n\n\n  function getDistance(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.sqrt(x * x + y * y);\n  }\n  /**\n   * calculate the angle between two coordinates\n   * @param {Object} p1\n   * @param {Object} p2\n   * @param {Array} [props] containing x and y keys\n   * @return {Number} angle\n   */\n\n\n  function getAngle(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n  }\n  /**\n   * calculate the rotation degrees between two pointersets\n   * @param {Array} start array of pointers\n   * @param {Array} end array of pointers\n   * @return {Number} rotation\n   */\n\n\n  function getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n  }\n  /**\n   * calculate the scale factor between two pointersets\n   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n   * @param {Array} start array of pointers\n   * @param {Array} end array of pointers\n   * @return {Number} scale\n   */\n\n\n  function getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n  }\n\n  var MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n  };\n  var MOUSE_ELEMENT_EVENTS = 'mousedown';\n  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n  /**\n   * Mouse events input\n   * @constructor\n   * @extends Input\n   */\n\n  function MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n  }\n\n  inherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n      var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n      if (eventType & INPUT_START && ev.button === 0) {\n        this.pressed = true;\n      }\n\n      if (eventType & INPUT_MOVE && ev.which !== 1) {\n        eventType = INPUT_END;\n      } // mouse must be down\n\n\n      if (!this.pressed) {\n        return;\n      }\n\n      if (eventType & INPUT_END) {\n        this.pressed = false;\n      }\n\n      this.callback(this.manager, eventType, {\n        pointers: [ev],\n        changedPointers: [ev],\n        pointerType: INPUT_TYPE_MOUSE,\n        srcEvent: ev\n      });\n    }\n  });\n  var POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n  }; // in IE10 the pointer types is defined as an enum\n\n  var IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n  };\n  var POINTER_ELEMENT_EVENTS = 'pointerdown';\n  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\n  if (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n  }\n  /**\n   * Pointer events input\n   * @constructor\n   * @extends Input\n   */\n\n\n  function PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n    Input.apply(this, arguments);\n    this.store = this.manager.session.pointerEvents = [];\n  }\n\n  inherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n      var store = this.store;\n      var removePointer = false;\n      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n      var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store\n\n      var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n        if (storeIndex < 0) {\n          store.push(ev);\n          storeIndex = store.length - 1;\n        }\n      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        removePointer = true;\n      } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n      if (storeIndex < 0) {\n        return;\n      } // update the event in the store\n\n\n      store[storeIndex] = ev;\n      this.callback(this.manager, eventType, {\n        pointers: store,\n        changedPointers: [ev],\n        pointerType: pointerType,\n        srcEvent: ev\n      });\n\n      if (removePointer) {\n        // remove from the store\n        store.splice(storeIndex, 1);\n      }\n    }\n  });\n  var SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\n   * Touch events input\n   * @constructor\n   * @extends Input\n   */\n\n  function SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n    Input.apply(this, arguments);\n  }\n\n  inherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n      var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n      if (type === INPUT_START) {\n        this.started = true;\n      }\n\n      if (!this.started) {\n        return;\n      }\n\n      var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n        this.started = false;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\n   * @this {TouchInput}\n   * @param {Object} ev\n   * @param {Number} type flag\n   * @returns {undefined|Array} [all, changed]\n   */\n\n  function normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n  }\n\n  var TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\n   * Multi-user touch events input\n   * @constructor\n   * @extends Input\n   */\n\n  function TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n    Input.apply(this, arguments);\n  }\n\n  inherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n      var type = TOUCH_INPUT_MAP[ev.type];\n      var touches = getTouches.call(this, ev, type);\n\n      if (!touches) {\n        return;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\n   * @this {TouchInput}\n   * @param {Object} ev\n   * @param {Number} type flag\n   * @returns {undefined|Array} [all, changed]\n   */\n\n  function getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n      targetIds[allTouches[0].identifier] = true;\n      return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target; // get target touches from touches\n\n    targetTouches = allTouches.filter(function (touch) {\n      return hasParent(touch.target, target);\n    }); // collect touches\n\n    if (type === INPUT_START) {\n      i = 0;\n\n      while (i < targetTouches.length) {\n        targetIds[targetTouches[i].identifier] = true;\n        i++;\n      }\n    } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n    i = 0;\n\n    while (i < changedTouches.length) {\n      if (targetIds[changedTouches[i].identifier]) {\n        changedTargetTouches.push(changedTouches[i]);\n      } // cleanup removed touches\n\n\n      if (type & (INPUT_END | INPUT_CANCEL)) {\n        delete targetIds[changedTouches[i].identifier];\n      }\n\n      i++;\n    }\n\n    if (!changedTargetTouches.length) {\n      return;\n    }\n\n    return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n  }\n  /**\n   * Combined touch and mouse input\n   *\n   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n   * This because touch devices also emit mouse events while doing a touch.\n   *\n   * @constructor\n   * @extends Input\n   */\n\n\n  var DEDUP_TIMEOUT = 2500;\n  var DEDUP_DISTANCE = 25;\n\n  function TouchMouseInput() {\n    Input.apply(this, arguments);\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n    this.primaryTouch = null;\n    this.lastTouches = [];\n  }\n\n  inherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n      var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,\n          isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;\n\n      if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n        return;\n      } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n      if (isTouch) {\n        recordTouches.call(this, inputEvent, inputData);\n      } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n        return;\n      }\n\n      this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    }\n  });\n\n  function recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n      this.primaryTouch = eventData.changedPointers[0].identifier;\n      setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      setLastTouch.call(this, eventData);\n    }\n  }\n\n  function setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n      var lastTouch = {\n        x: touch.clientX,\n        y: touch.clientY\n      };\n      this.lastTouches.push(lastTouch);\n      var lts = this.lastTouches;\n\n      var removeLastTouch = function () {\n        var i = lts.indexOf(lastTouch);\n\n        if (i > -1) {\n          lts.splice(i, 1);\n        }\n      };\n\n      setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n  }\n\n  function isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX,\n        y = eventData.srcEvent.clientY;\n\n    for (var i = 0; i < this.lastTouches.length; i++) {\n      var t = this.lastTouches[i];\n      var dx = Math.abs(x - t.x),\n          dy = Math.abs(y - t.y);\n\n      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined; // magical touchAction value\n\n  var TOUCH_ACTION_COMPUTE = 'compute';\n  var TOUCH_ACTION_AUTO = 'auto';\n  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\n  var TOUCH_ACTION_NONE = 'none';\n  var TOUCH_ACTION_PAN_X = 'pan-x';\n  var TOUCH_ACTION_PAN_Y = 'pan-y';\n  var TOUCH_ACTION_MAP = getTouchActionProps();\n  /**\n   * Touch Action\n   * sets the touchAction property or uses the js alternative\n   * @param {Manager} manager\n   * @param {String} value\n   * @constructor\n   */\n\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n\n  TouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function (value) {\n      // find out the touch-action by the event handlers\n      if (value == TOUCH_ACTION_COMPUTE) {\n        value = this.compute();\n      }\n\n      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n      }\n\n      this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function () {\n      this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function () {\n      var actions = [];\n      each(this.manager.recognizers, function (recognizer) {\n        if (boolOrFn(recognizer.options.enable, [recognizer])) {\n          actions = actions.concat(recognizer.getTouchAction());\n        }\n      });\n      return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function (input) {\n      var srcEvent = input.srcEvent;\n      var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n      if (this.manager.session.prevented) {\n        srcEvent.preventDefault();\n        return;\n      }\n\n      var actions = this.actions;\n      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n      if (hasNone) {\n        //do not prevent defaults if this is a tap gesture\n        var isTapPointer = input.pointers.length === 1;\n        var isTapMovement = input.distance < 2;\n        var isTapTouchTime = input.deltaTime < 250;\n\n        if (isTapPointer && isTapMovement && isTapTouchTime) {\n          return;\n        }\n      }\n\n      if (hasPanX && hasPanY) {\n        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n        return;\n      }\n\n      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n        return this.preventSrc(srcEvent);\n      }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function (srcEvent) {\n      this.manager.session.prevented = true;\n      srcEvent.preventDefault();\n    }\n  };\n  /**\n   * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n   * @param {String} actions\n   * @returns {*}\n   */\n\n  function cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n      return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n\n    if (hasPanX && hasPanY) {\n      return TOUCH_ACTION_NONE;\n    } // pan-x OR pan-y\n\n\n    if (hasPanX || hasPanY) {\n      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    } // manipulation\n\n\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n      return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n  }\n\n  function getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n      return false;\n    }\n\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n      // If css.supports is not supported but there is native touch-action assume it supports\n      // all values. This is the case for IE 10 and 11.\n      touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n  }\n  /**\n   * Recognizer flow explained; *\n   * All recognizers have the initial state of POSSIBLE when a input session starts.\n   * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n   * Example session for mouse-input: mousedown -> mousemove -> mouseup\n   *\n   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n   * which determines with state it should be.\n   *\n   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n   * POSSIBLE to give it another change on the next cycle.\n   *\n   *               Possible\n   *                  |\n   *            +-----+---------------+\n   *            |                     |\n   *      +-----+-----+               |\n   *      |           |               |\n   *   Failed      Cancelled          |\n   *                          +-------+------+\n   *                          |              |\n   *                      Recognized       Began\n   *                                         |\n   *                                      Changed\n   *                                         |\n   *                                  Ended/Recognized\n   */\n\n\n  var STATE_POSSIBLE = 1;\n  var STATE_BEGAN = 2;\n  var STATE_CHANGED = 4;\n  var STATE_ENDED = 8;\n  var STATE_RECOGNIZED = STATE_ENDED;\n  var STATE_CANCELLED = 16;\n  var STATE_FAILED = 32;\n  /**\n   * Recognizer\n   * Every recognizer needs to extend from this class.\n   * @constructor\n   * @param {Object} options\n   */\n\n  function Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.options.enable = ifUndefined(this.options.enable, true);\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n\n  Recognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function (options) {\n      assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n      this.manager && this.manager.touchAction.update();\n      return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n        return this;\n      }\n\n      var simultaneous = this.simultaneous;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (!simultaneous[otherRecognizer.id]) {\n        simultaneous[otherRecognizer.id] = otherRecognizer;\n        otherRecognizer.recognizeWith(this);\n      }\n\n      return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      delete this.simultaneous[otherRecognizer.id];\n      return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n        return this;\n      }\n\n      var requireFail = this.requireFail;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (inArray(requireFail, otherRecognizer) === -1) {\n        requireFail.push(otherRecognizer);\n        otherRecognizer.requireFailure(this);\n      }\n\n      return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      var index = inArray(this.requireFail, otherRecognizer);\n\n      if (index > -1) {\n        this.requireFail.splice(index, 1);\n      }\n\n      return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function () {\n      return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function (otherRecognizer) {\n      return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function (input) {\n      var self = this;\n      var state = this.state;\n\n      function emit(event) {\n        self.manager.emit(event, input);\n      } // 'panstart' and 'panmove'\n\n\n      if (state < STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n\n      emit(self.options.event); // simple 'eventName' events\n\n      if (input.additionalEvent) {\n        // additional event(panleft, panright, pinchin, pinchout...)\n        emit(input.additionalEvent);\n      } // panend and pancancel\n\n\n      if (state >= STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function (input) {\n      if (this.canEmit()) {\n        return this.emit(input);\n      } // it's failing anyway\n\n\n      this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function () {\n      var i = 0;\n\n      while (i < this.requireFail.length) {\n        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n          return false;\n        }\n\n        i++;\n      }\n\n      return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function (inputData) {\n      // make a new copy of the inputData\n      // so we can change the inputData without messing up the other recognizers\n      var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?\n\n      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n        this.reset();\n        this.state = STATE_FAILED;\n        return;\n      } // reset when we've reached the end\n\n\n      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n        this.state = STATE_POSSIBLE;\n      }\n\n      this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n      // so trigger an event\n\n      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n        this.tryEmit(inputDataClone);\n      }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function (inputData) {},\n    // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function () {},\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function () {}\n  };\n  /**\n   * get a usable string, used as event postfix\n   * @param {Const} state\n   * @returns {String} state\n   */\n\n  function stateStr(state) {\n    if (state & STATE_CANCELLED) {\n      return 'cancel';\n    } else if (state & STATE_ENDED) {\n      return 'end';\n    } else if (state & STATE_CHANGED) {\n      return 'move';\n    } else if (state & STATE_BEGAN) {\n      return 'start';\n    }\n\n    return '';\n  }\n  /**\n   * direction cons to string\n   * @param {Const} direction\n   * @returns {String}\n   */\n\n\n  function directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n      return 'down';\n    } else if (direction == DIRECTION_UP) {\n      return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n      return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n      return 'right';\n    }\n\n    return '';\n  }\n  /**\n   * get a recognizer by name if it is bound to a manager\n   * @param {Recognizer|String} otherRecognizer\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer}\n   */\n\n\n  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n\n    if (manager) {\n      return manager.get(otherRecognizer);\n    }\n\n    return otherRecognizer;\n  }\n  /**\n   * This recognizer is just used as a base for the simple attribute recognizers.\n   * @constructor\n   * @extends Recognizer\n   */\n\n\n  function AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n  }\n\n  inherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n      /**\n       * @type {Number}\n       * @default 1\n       */\n      pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function (input) {\n      var optionPointers = this.options.pointers;\n      return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function (input) {\n      var state = this.state;\n      var eventType = input.eventType;\n      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n      var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n        return state | STATE_CANCELLED;\n      } else if (isRecognized || isValid) {\n        if (eventType & INPUT_END) {\n          return state | STATE_ENDED;\n        } else if (!(state & STATE_BEGAN)) {\n          return STATE_BEGAN;\n        }\n\n        return state | STATE_CHANGED;\n      }\n\n      return STATE_FAILED;\n    }\n  });\n  /**\n   * Pan\n   * Recognized when the pointer is down and moved in the allowed direction.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n    this.pX = null;\n    this.pY = null;\n  }\n\n  inherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    },\n    getTouchAction: function () {\n      var direction = this.options.direction;\n      var actions = [];\n\n      if (direction & DIRECTION_HORIZONTAL) {\n        actions.push(TOUCH_ACTION_PAN_Y);\n      }\n\n      if (direction & DIRECTION_VERTICAL) {\n        actions.push(TOUCH_ACTION_PAN_X);\n      }\n\n      return actions;\n    },\n    directionTest: function (input) {\n      var options = this.options;\n      var hasMoved = true;\n      var distance = input.distance;\n      var direction = input.direction;\n      var x = input.deltaX;\n      var y = input.deltaY; // lock to axis?\n\n      if (!(direction & options.direction)) {\n        if (options.direction & DIRECTION_HORIZONTAL) {\n          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n          hasMoved = x != this.pX;\n          distance = Math.abs(input.deltaX);\n        } else {\n          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n          hasMoved = y != this.pY;\n          distance = Math.abs(input.deltaY);\n        }\n      }\n\n      input.direction = direction;\n      return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n    attrTest: function (input) {\n      return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n    },\n    emit: function (input) {\n      this.pX = input.deltaX;\n      this.pY = input.deltaY;\n      var direction = directionStr(input.direction);\n\n      if (direction) {\n        input.additionalEvent = this.options.event + direction;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\n   * Pinch\n   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function (input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n    emit: function (input) {\n      if (input.scale !== 1) {\n        var inOut = input.scale < 1 ? 'in' : 'out';\n        input.additionalEvent = this.options.event + inOut;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\n   * Press\n   * Recognized when the pointer is down for x ms without any movement.\n   * @constructor\n   * @extends Recognizer\n   */\n\n  function PressRecognizer() {\n    Recognizer.apply(this, arguments);\n    this._timer = null;\n    this._input = null;\n  }\n\n  inherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9 // a minimal movement is ok, but keep it low\n\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_AUTO];\n    },\n    process: function (input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTime = input.deltaTime > options.time;\n      this._input = input; // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n        this.reset();\n      } else if (input.eventType & INPUT_START) {\n        this.reset();\n        this._timer = setTimeoutContext(function () {\n          this.state = STATE_RECOGNIZED;\n          this.tryEmit();\n        }, options.time, this);\n      } else if (input.eventType & INPUT_END) {\n        return STATE_RECOGNIZED;\n      }\n\n      return STATE_FAILED;\n    },\n    reset: function () {\n      clearTimeout(this._timer);\n    },\n    emit: function (input) {\n      if (this.state !== STATE_RECOGNIZED) {\n        return;\n      }\n\n      if (input && input.eventType & INPUT_END) {\n        this.manager.emit(this.options.event + 'up', input);\n      } else {\n        this._input.timeStamp = now();\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\n   * Rotate\n   * Recognized when two or more pointer are moving in a circular motion.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function (input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n  });\n  /**\n   * Swipe\n   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    },\n    getTouchAction: function () {\n      return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n    attrTest: function (input) {\n      var direction = this.options.direction;\n      var velocity;\n\n      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n        velocity = input.overallVelocity;\n      } else if (direction & DIRECTION_HORIZONTAL) {\n        velocity = input.overallVelocityX;\n      } else if (direction & DIRECTION_VERTICAL) {\n        velocity = input.overallVelocityY;\n      }\n\n      return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n    emit: function (input) {\n      var direction = directionStr(input.offsetDirection);\n\n      if (direction) {\n        this.manager.emit(this.options.event + direction, input);\n      }\n\n      this.manager.emit(this.options.event, input);\n    }\n  });\n  /**\n   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n   * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n   * a single tap.\n   *\n   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n   * multi-taps being recognized.\n   * @constructor\n   * @extends Recognizer\n   */\n\n  function TapRecognizer() {\n    Recognizer.apply(this, arguments); // previous time and center,\n    // used for tap counting\n\n    this.pTime = false;\n    this.pCenter = false;\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n  }\n\n  inherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10 // a multi-tap can be a bit off the initial position\n\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_MANIPULATION];\n    },\n    process: function (input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTouchTime = input.deltaTime < options.time;\n      this.reset();\n\n      if (input.eventType & INPUT_START && this.count === 0) {\n        return this.failTimeout();\n      } // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n\n      if (validMovement && validTouchTime && validPointers) {\n        if (input.eventType != INPUT_END) {\n          return this.failTimeout();\n        }\n\n        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n        this.pTime = input.timeStamp;\n        this.pCenter = input.center;\n\n        if (!validMultiTap || !validInterval) {\n          this.count = 1;\n        } else {\n          this.count += 1;\n        }\n\n        this._input = input; // if tap count matches we have recognized it,\n        // else it has began recognizing...\n\n        var tapCount = this.count % options.taps;\n\n        if (tapCount === 0) {\n          // no failing requirements, immediately trigger the tap event\n          // or wait as long as the multitap interval to trigger\n          if (!this.hasRequireFailures()) {\n            return STATE_RECOGNIZED;\n          } else {\n            this._timer = setTimeoutContext(function () {\n              this.state = STATE_RECOGNIZED;\n              this.tryEmit();\n            }, options.interval, this);\n            return STATE_BEGAN;\n          }\n        }\n      }\n\n      return STATE_FAILED;\n    },\n    failTimeout: function () {\n      this._timer = setTimeoutContext(function () {\n        this.state = STATE_FAILED;\n      }, this.options.interval, this);\n      return STATE_FAILED;\n    },\n    reset: function () {\n      clearTimeout(this._timer);\n    },\n    emit: function () {\n      if (this.state == STATE_RECOGNIZED) {\n        this._input.tapCount = this.count;\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\n   * Simple way to create a manager with a default set of recognizers.\n   * @param {HTMLElement} element\n   * @param {Object} [options]\n   * @constructor\n   */\n\n  function Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n  }\n  /**\n   * @const {string}\n   */\n\n\n  Hammer.VERSION = '2.0.7';\n  /**\n   * default settings\n   * @namespace\n   */\n\n  Hammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n    [RotateRecognizer, {\n      enable: false\n    }], [PinchRecognizer, {\n      enable: false\n    }, ['rotate']], [SwipeRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }], [PanRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }, ['swipe']], [TapRecognizer], [TapRecognizer, {\n      event: 'doubletap',\n      taps: 2\n    }, ['tap']], [PressRecognizer]],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n      /**\n       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n       * @type {String}\n       * @default 'none'\n       */\n      userSelect: 'none',\n\n      /**\n       * Disable the Windows Phone grippers when pressing an element.\n       * @type {String}\n       * @default 'none'\n       */\n      touchSelect: 'none',\n\n      /**\n       * Disables the default callout shown when you touch and hold a touch target.\n       * On iOS, when you touch and hold a touch target such as a link, Safari displays\n       * a callout containing information about the link. This property allows you to disable that callout.\n       * @type {String}\n       * @default 'none'\n       */\n      touchCallout: 'none',\n\n      /**\n       * Specifies whether zooming is enabled. Used by IE10>\n       * @type {String}\n       * @default 'none'\n       */\n      contentZooming: 'none',\n\n      /**\n       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n       * @type {String}\n       * @default 'none'\n       */\n      userDrag: 'none',\n\n      /**\n       * Overrides the highlight color shown when the user taps a link or a JavaScript\n       * clickable element in iOS. This property obeys the alpha value, if specified.\n       * @type {String}\n       * @default 'rgba(0,0,0,0)'\n       */\n      tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n  };\n  var STOP = 1;\n  var FORCED_STOP = 2;\n  /**\n   * Manager\n   * @param {HTMLElement} element\n   * @param {Object} [options]\n   * @constructor\n   */\n\n  function Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = this.add(new item[0](item[1]));\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n\n  Manager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function (options) {\n      assign(this.options, options); // Options that need a little more setup\n\n      if (options.touchAction) {\n        this.touchAction.update();\n      }\n\n      if (options.inputTarget) {\n        // Clean up existing event listeners and reinitialize\n        this.input.destroy();\n        this.input.target = options.inputTarget;\n        this.input.init();\n      }\n\n      return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function (force) {\n      this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function (inputData) {\n      var session = this.session;\n\n      if (session.stopped) {\n        return;\n      } // run the touch-action polyfill\n\n\n      this.touchAction.preventDefaults(inputData);\n      var recognizer;\n      var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n      // if no recognizer is detecting a thing, it is set to `null`\n\n      var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n      // or when we're in a new session\n\n      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n        curRecognizer = session.curRecognizer = null;\n      }\n\n      var i = 0;\n\n      while (i < recognizers.length) {\n        recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n        // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n        //      that is being recognized.\n        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n        //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n        if (session.stopped !== FORCED_STOP && ( // 1\n        !curRecognizer || recognizer == curRecognizer || // 2\n        recognizer.canRecognizeWith(curRecognizer))) {\n          // 3\n          recognizer.recognize(inputData);\n        } else {\n          recognizer.reset();\n        } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n        // current active recognizer. but only if we don't already have an active recognizer\n\n\n        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n          curRecognizer = session.curRecognizer = recognizer;\n        }\n\n        i++;\n      }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function (recognizer) {\n      if (recognizer instanceof Recognizer) {\n        return recognizer;\n      }\n\n      var recognizers = this.recognizers;\n\n      for (var i = 0; i < recognizers.length; i++) {\n        if (recognizers[i].options.event == recognizer) {\n          return recognizers[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function (recognizer) {\n      if (invokeArrayArg(recognizer, 'add', this)) {\n        return this;\n      } // remove existing\n\n\n      var existing = this.get(recognizer.options.event);\n\n      if (existing) {\n        this.remove(existing);\n      }\n\n      this.recognizers.push(recognizer);\n      recognizer.manager = this;\n      this.touchAction.update();\n      return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function (recognizer) {\n      if (invokeArrayArg(recognizer, 'remove', this)) {\n        return this;\n      }\n\n      recognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n      if (recognizer) {\n        var recognizers = this.recognizers;\n        var index = inArray(recognizers, recognizer);\n\n        if (index !== -1) {\n          recognizers.splice(index, 1);\n          this.touchAction.update();\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function (events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      if (handler === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        handlers[event] = handlers[event] || [];\n        handlers[event].push(handler);\n      });\n      return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function (events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        if (!handler) {\n          delete handlers[event];\n        } else {\n          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n        }\n      });\n      return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function (event, data) {\n      // we also want to trigger dom events\n      if (this.options.domEvents) {\n        triggerDomEvent(event, data);\n      } // no handlers, so skip it all\n\n\n      var handlers = this.handlers[event] && this.handlers[event].slice();\n\n      if (!handlers || !handlers.length) {\n        return;\n      }\n\n      data.type = event;\n\n      data.preventDefault = function () {\n        data.srcEvent.preventDefault();\n      };\n\n      var i = 0;\n\n      while (i < handlers.length) {\n        handlers[i](data);\n        i++;\n      }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function () {\n      this.element && toggleCssProps(this, false);\n      this.handlers = {};\n      this.session = {};\n      this.input.destroy();\n      this.element = null;\n    }\n  };\n  /**\n   * add/remove the css properties as defined in manager.options.cssProps\n   * @param {Manager} manager\n   * @param {Boolean} add\n   */\n\n  function toggleCssProps(manager, add) {\n    var element = manager.element;\n\n    if (!element.style) {\n      return;\n    }\n\n    var prop;\n    each(manager.options.cssProps, function (value, name) {\n      prop = prefixed(element.style, name);\n\n      if (add) {\n        manager.oldCssProps[prop] = element.style[prop];\n        element.style[prop] = value;\n      } else {\n        element.style[prop] = manager.oldCssProps[prop] || '';\n      }\n    });\n\n    if (!add) {\n      manager.oldCssProps = {};\n    }\n  }\n  /**\n   * trigger dom event\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  function triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n  }\n\n  assign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n  }); // this prevents errors when Hammer is loaded in the presence of an AMD\n  //  style loader but by script tag, not by the loader.\n\n  var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line\n\n  freeGlobal.Hammer = Hammer;\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Hammer;\n    });\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n  } else {\n    window[exportName] = Hammer;\n  }\n})(window, document, 'Hammer');","map":{"version":3,"names":["window","document","exportName","undefined","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","arguments","assign","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","baseP","prototype","childP","create","constructor","_super","boundFn","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","sortUniqueArray","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","evEl","evTarget","evWin","destroy","createInputInstance","Type","inputClass","PointerEventInput","TouchInput","MouseInput","TouchMouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","last","lastInterval","velocity","velocityX","velocityY","direction","v","clientX","clientY","p1","p2","props","sqrt","atan2","PI","start","end","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","pressed","MEhandler","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","MSPointerEvent","PointerEvent","store","pointerEvents","PEhandler","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","TEhandler","touches","normalizeSingleTouches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","targetIds","MTEhandler","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","mouse","primaryTouch","lastTouches","TMEhandler","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","recordTouches","isSyntheticEvent","eventData","setLastTouch","lastTouch","lts","removeLastTouch","t","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","TouchAction","value","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","hasPanY","hasPanX","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","touchMap","cssSupports","CSS","supports","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","STATE_FAILED","Recognizer","defaults","id","state","simultaneous","requireFail","recognizeWith","otherRecognizer","getRecognizerByNameIfManager","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","stateStr","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","directionStr","get","AttrRecognizer","attrTest","optionPointers","isRecognized","isValid","PanRecognizer","pX","pY","threshold","directionTest","hasMoved","PinchRecognizer","inOut","PressRecognizer","_timer","_input","time","validPointers","validMovement","validTime","clearTimeout","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","Hammer","preset","Manager","VERSION","domEvents","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","triggerDomEvent","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","define","amd","module","exports"],"sources":["/Users/lavanyagurajada/HOV/heartofthevalley/app/client/node_modules/hammerjs/hammer.js"],"sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}