{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst {\n  WHEEL_EVENTS\n} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel'; // Constants for normalizing input delta\n\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40; // Slow down zoom if shift key is held for more precise zooming\n\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    /* eslint-disable complexity, max-statements */\n\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n\n      let value = event.deltaY;\n\n      if (window.WheelEvent) {\n        // Firefox doubles the values on retina screens...\n        if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n          value /= window.devicePixelRatio;\n        }\n\n        if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n          value *= WHEEL_DELTA_PER_LINE;\n        }\n      }\n\n      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n        // This one is definitely a mouse wheel event.\n        // Normalize this value to match trackpad.\n        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n      }\n\n      if (event.shiftKey && value) {\n        value = value * SHIFT_MULTIPLIER;\n      }\n\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        delta: -value,\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n\n    this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? {\n      passive: false\n    } : false));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n\n\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n}","map":{"version":3,"mappings":"AACA,OAAOA,KAAP,MAAkC,SAAlC;AAEA,SAAQC,iBAAR,QAAgC,cAAhC;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,gBAA3B,QAAkD,kBAAlD;AAEA,MAAMC,OAAO,GAAGF,SAAS,CAACG,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAAlD;AAEA,MAAM;EAACC;AAAD,IAAiBN,iBAAvB;AACA,MAAMO,UAAU,GAAG,OAAnB,C,CAEA;;AACA,MAAMC,wBAAwB,GAAG,cAAjC;AACA,MAAMC,oBAAoB,GAAG,EAA7B,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,IAAzB;AAEA,eAAc,MAAOC,UAAP,SAA0BZ,KAA1B,CAAmE;EAG/Ea,YACEC,OADF,EAEEC,QAFF,EAGEC,OAHF,EAGuB;IAErB,MAAMF,OAAN,EAAeC,QAAf,EAAyBC,OAAzB;IAuBF;;IACA,mBAAeC,KAAD,IAAsB;MAClC,IAAI,CAAC,KAAKD,OAAL,CAAaE,MAAlB,EAA0B;QACxB;MACD;;MAED,IAAIC,KAAK,GAAGF,KAAK,CAACG,MAAlB;;MACA,IAAIlB,MAAM,CAACmB,UAAX,EAAuB;QACrB;QACA,IAAIhB,OAAO,IAAIY,KAAK,CAACK,SAAN,KAAoBpB,MAAM,CAACmB,UAAP,CAAkBE,eAArD,EAAsE;UACpEJ,KAAK,IAAIjB,MAAM,CAACsB,gBAAhB;QACD;;QACD,IAAIP,KAAK,CAACK,SAAN,KAAoBpB,MAAM,CAACmB,UAAP,CAAkBI,cAA1C,EAA0D;UACxDN,KAAK,IAAIT,oBAAT;QACD;MACF;;MAED,IAAIS,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAGV,wBAAR,KAAqC,CAAxD,EAA2D;QACzD;QACA;QACAU,KAAK,GAAGO,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAGV,wBAAnB,CAAR;MACD;;MAED,IAAIQ,KAAK,CAACW,QAAN,IAAkBT,KAAtB,EAA6B;QAC3BA,KAAK,GAAGA,KAAK,GAAGR,gBAAhB;MACD;;MAED,KAAKI,QAAL,CAAc;QACZc,IAAI,EAAErB,UADM;QAEZsB,MAAM,EAAE;UACNC,CAAC,EAAEd,KAAK,CAACe,OADH;UAENC,CAAC,EAAEhB,KAAK,CAACiB;QAFH,CAFI;QAMZC,KAAK,EAAE,CAAChB,KANI;QAOZiB,QAAQ,EAAEnB,KAPE;QAQZoB,WAAW,EAAE,OARD;QASZC,MAAM,EAAErB,KAAK,CAACqB;MATF,CAAd;IAWD,CArCD;;IAtBE,KAAKC,MAAL,GAAc,CAAC,KAAKvB,OAAL,CAAauB,MAAb,IAAuB,EAAxB,EAA4BC,MAA5B,CAAmCjC,YAAnC,CAAd;IAEA,KAAKgC,MAAL,CAAYE,OAAZ,CAAoBxB,KAAK,IACvBH,OAAO,CAAC4B,gBAAR,CAAyBzB,KAAzB,EAAgC,KAAK0B,WAArC,EAAkDvC,gBAAgB,GAAG;MAACwC,OAAO,EAAE;IAAV,CAAH,GAAsB,KAAxF,CADF;EAGD;;EAEDC,OAAO;IACL,KAAKN,MAAL,CAAYE,OAAZ,CAAoBxB,KAAK,IAAI,KAAKH,OAAL,CAAagC,mBAAb,CAAiC7B,KAAjC,EAAwC,KAAK0B,WAA7C,CAA7B;EACD;EAED;;;;;;EAIAI,eAAe,CAACC,SAAD,EAAoBC,OAApB,EAAoC;IACjD,IAAID,SAAS,KAAKxC,UAAlB,EAA8B;MAC5B,KAAKQ,OAAL,CAAaE,MAAb,GAAsB+B,OAAtB;IACD;EACF;;AA7B8E","names":["Input","INPUT_EVENT_TYPES","window","userAgent","passiveSupported","firefox","indexOf","WHEEL_EVENTS","EVENT_TYPE","WHEEL_DELTA_MAGIC_SCALER","WHEEL_DELTA_PER_LINE","SHIFT_MULTIPLIER","WheelInput","constructor","element","callback","options","event","enable","value","deltaY","WheelEvent","deltaMode","DOM_DELTA_PIXEL","devicePixelRatio","DOM_DELTA_LINE","Math","floor","shiftKey","type","center","x","clientX","y","clientY","delta","srcEvent","pointerType","target","events","concat","forEach","addEventListener","handleEvent","passive","destroy","removeEventListener","enableEventType","eventType","enabled"],"sourceRoot":"","sources":["../../../src/inputs/wheel-input.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}