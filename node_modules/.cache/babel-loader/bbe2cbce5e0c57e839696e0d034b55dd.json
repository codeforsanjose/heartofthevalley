{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","hypot","squaredDistance","length","squaredLength","negate","inverse","normalize","len","sqrt","dot","cross","z","lerp","t","ax","ay","random","r","RANDOM","PI","cos","sin","transformMat2","m","transformMat2d","transformMat3","transformMat4","rotate","rad","p0","p1","sinC","cosC","angle","x1","y1","x2","y2","mag","cosine","acos","zero","str","exactEquals","equals","a0","a1","b0","b1","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"sources":["/Users/lavanyagurajada/HOV_old/heartofthevalley/app/client/node_modules/gl-matrix/esm/vec2.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}