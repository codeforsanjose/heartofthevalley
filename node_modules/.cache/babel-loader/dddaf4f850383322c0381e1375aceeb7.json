{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  MOUSE_EVENTS\n} = INPUT_EVENT_TYPES;\nconst MOVE_EVENT_TYPE = 'pointermove';\nconst OVER_EVENT_TYPE = 'pointerover';\nconst OUT_EVENT_TYPE = 'pointerout';\nconst ENTER_EVENT_TYPE = 'pointerenter';\nconst LEAVE_EVENT_TYPE = 'pointerleave';\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\n\nexport default class MoveInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n\n    this.handleEvent = event => {\n      this.handleOverEvent(event);\n      this.handleOutEvent(event);\n      this.handleEnterEvent(event);\n      this.handleLeaveEvent(event);\n      this.handleMoveEvent(event);\n    };\n\n    this.pressed = false;\n    const {\n      enable\n    } = this.options;\n    this.enableMoveEvent = enable;\n    this.enableLeaveEvent = enable;\n    this.enableEnterEvent = enable;\n    this.enableOutEvent = enable;\n    this.enableOverEvent = enable;\n    this.events = (this.options.events || []).concat(MOUSE_EVENTS);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n\n\n  enableEventType(eventType, enabled) {\n    if (eventType === MOVE_EVENT_TYPE) {\n      this.enableMoveEvent = enabled;\n    }\n\n    if (eventType === OVER_EVENT_TYPE) {\n      this.enableOverEvent = enabled;\n    }\n\n    if (eventType === OUT_EVENT_TYPE) {\n      this.enableOutEvent = enabled;\n    }\n\n    if (eventType === ENTER_EVENT_TYPE) {\n      this.enableEnterEvent = enabled;\n    }\n\n    if (eventType === LEAVE_EVENT_TYPE) {\n      this.enableLeaveEvent = enabled;\n    }\n  }\n\n  handleOverEvent(event) {\n    if (this.enableOverEvent) {\n      if (event.type === 'mouseover') {\n        this._emit(OVER_EVENT_TYPE, event);\n      }\n    }\n  }\n\n  handleOutEvent(event) {\n    if (this.enableOutEvent) {\n      if (event.type === 'mouseout') {\n        this._emit(OUT_EVENT_TYPE, event);\n      }\n    }\n  }\n\n  handleEnterEvent(event) {\n    if (this.enableEnterEvent) {\n      if (event.type === 'mouseenter') {\n        this._emit(ENTER_EVENT_TYPE, event);\n      }\n    }\n  }\n\n  handleLeaveEvent(event) {\n    if (this.enableLeaveEvent) {\n      if (event.type === 'mouseleave') {\n        this._emit(LEAVE_EVENT_TYPE, event);\n      }\n    }\n  }\n\n  handleMoveEvent(event) {\n    if (this.enableMoveEvent) {\n      switch (event.type) {\n        case 'mousedown':\n          if (event.button >= 0) {\n            // Button is down\n            this.pressed = true;\n          }\n\n          break;\n\n        case 'mousemove':\n          // Move events use `which` to track the button being pressed\n          if (event.which === 0) {\n            // Button is not down\n            this.pressed = false;\n          }\n\n          if (!this.pressed) {\n            // Drag events are emitted by hammer already\n            // we just need to emit the move event on hover\n            this._emit(MOVE_EVENT_TYPE, event);\n          }\n\n          break;\n\n        case 'mouseup':\n          this.pressed = false;\n          break;\n\n        default:\n      }\n    }\n  }\n\n  _emit(type, event) {\n    this.callback({\n      type,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Input","INPUT_EVENT_TYPES","MOUSE_EVENTS","MOVE_EVENT_TYPE","OVER_EVENT_TYPE","OUT_EVENT_TYPE","ENTER_EVENT_TYPE","LEAVE_EVENT_TYPE","MoveInput","constructor","element","callback","options","event","handleOverEvent","handleOutEvent","handleEnterEvent","handleLeaveEvent","handleMoveEvent","pressed","enable","enableMoveEvent","enableLeaveEvent","enableEnterEvent","enableOutEvent","enableOverEvent","events","concat","forEach","addEventListener","handleEvent","destroy","removeEventListener","enableEventType","eventType","enabled","type","_emit","button","which","center","x","clientX","y","clientY","srcEvent","pointerType","target"],"sourceRoot":"","sources":["../../../src/inputs/move-input.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}