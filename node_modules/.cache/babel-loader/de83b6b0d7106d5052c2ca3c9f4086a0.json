{"ast":null,"code":"import { useContext, useRef, useEffect } from 'react';\nimport * as PropTypes from 'prop-types';\nimport MapContext from './map-context';\nexport var mapControlDefaultProps = {\n  captureScroll: false,\n  captureDrag: true,\n  captureClick: true,\n  captureDoubleClick: true,\n  capturePointerMove: false\n};\nexport var mapControlPropTypes = {\n  captureScroll: PropTypes.bool,\n  captureDrag: PropTypes.bool,\n  captureClick: PropTypes.bool,\n  captureDoubleClick: PropTypes.bool,\n  capturePointerMove: PropTypes.bool\n};\n\nfunction onMount(thisRef) {\n  var ref = thisRef.containerRef.current;\n  var eventManager = thisRef.context.eventManager;\n\n  if (!ref || !eventManager) {\n    return undefined;\n  }\n\n  var events = {\n    wheel: function wheel(evt) {\n      var props = thisRef.props;\n\n      if (props.captureScroll) {\n        evt.stopPropagation();\n      }\n\n      if (props.onScroll) {\n        props.onScroll(evt, thisRef);\n      }\n    },\n    panstart: function panstart(evt) {\n      var props = thisRef.props;\n\n      if (props.captureDrag) {\n        evt.stopPropagation();\n      }\n\n      if (props.onDragStart) {\n        props.onDragStart(evt, thisRef);\n      }\n    },\n    anyclick: function anyclick(evt) {\n      var props = thisRef.props;\n\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n\n      if (props.onNativeClick) {\n        props.onNativeClick(evt, thisRef);\n      }\n    },\n    click: function click(evt) {\n      var props = thisRef.props;\n\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n\n      if (props.onClick) {\n        props.onClick(evt, thisRef);\n      }\n    },\n    dblclick: function dblclick(evt) {\n      var props = thisRef.props;\n\n      if (props.captureDoubleClick) {\n        evt.stopPropagation();\n      }\n\n      if (props.onDoubleClick) {\n        props.onDoubleClick(evt, thisRef);\n      }\n    },\n    pointermove: function pointermove(evt) {\n      var props = thisRef.props;\n\n      if (props.capturePointerMove) {\n        evt.stopPropagation();\n      }\n\n      if (props.onPointerMove) {\n        props.onPointerMove(evt, thisRef);\n      }\n    }\n  };\n  eventManager.watch(events, ref);\n  return function () {\n    eventManager.off(events);\n  };\n}\n\nexport default function useMapControl() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = useContext(MapContext);\n  var containerRef = useRef(null);\n\n  var _thisRef = useRef({\n    props: props,\n    state: {},\n    context: context,\n    containerRef: containerRef\n  });\n\n  var thisRef = _thisRef.current;\n  thisRef.props = props;\n  thisRef.context = context;\n  useEffect(function () {\n    return onMount(thisRef);\n  }, [context.eventManager]);\n  return thisRef;\n}","map":{"version":3,"mappings":"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","names":["useContext","useRef","useEffect","PropTypes","MapContext","mapControlDefaultProps","captureScroll","captureDrag","captureClick","captureDoubleClick","capturePointerMove","mapControlPropTypes","bool","onMount","thisRef","ref","containerRef","current","eventManager","context","undefined","events","wheel","props","evt","stopPropagation","onScroll","panstart","onDragStart","anyclick","onNativeClick","click","onClick","dblclick","onDoubleClick","pointermove","onPointerMove","watch","off","useMapControl","_thisRef","state"],"sources":["../../../src/components/use-map-control.js"],"sourcesContent":["import {useContext, useRef, useEffect} from 'react';\nimport * as PropTypes from 'prop-types';\nimport MapContext from './map-context';\n\nexport const mapControlDefaultProps = {\n  captureScroll: false,\n  captureDrag: true,\n  captureClick: true,\n  captureDoubleClick: true,\n  capturePointerMove: false\n};\n\nexport const mapControlPropTypes = {\n  /** Event handling */\n  captureScroll: PropTypes.bool,\n  // Stop map pan & rotate\n  captureDrag: PropTypes.bool,\n  // Stop map click\n  captureClick: PropTypes.bool,\n  // Stop map double click\n  captureDoubleClick: PropTypes.bool,\n  // Stop map pointer move\n  capturePointerMove: PropTypes.bool\n};\n\nfunction onMount(thisRef) {\n  const ref = thisRef.containerRef.current;\n  const {eventManager} = thisRef.context;\n  if (!ref || !eventManager) {\n    return undefined;\n  }\n\n  const events = {\n    wheel: evt => {\n      const {props} = thisRef;\n      if (props.captureScroll) {\n        evt.stopPropagation();\n      }\n      if (props.onScroll) {\n        props.onScroll(evt, thisRef);\n      }\n    },\n    panstart: evt => {\n      const {props} = thisRef;\n      if (props.captureDrag) {\n        evt.stopPropagation();\n      }\n      if (props.onDragStart) {\n        props.onDragStart(evt, thisRef);\n      }\n    },\n    anyclick: evt => {\n      const {props} = thisRef;\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n      if (props.onNativeClick) {\n        props.onNativeClick(evt, thisRef);\n      }\n    },\n    click: evt => {\n      const {props} = thisRef;\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n      if (props.onClick) {\n        props.onClick(evt, thisRef);\n      }\n    },\n    dblclick: evt => {\n      const {props} = thisRef;\n      if (props.captureDoubleClick) {\n        evt.stopPropagation();\n      }\n      if (props.onDoubleClick) {\n        props.onDoubleClick(evt, thisRef);\n      }\n    },\n    pointermove: evt => {\n      const {props} = thisRef;\n      if (props.capturePointerMove) {\n        evt.stopPropagation();\n      }\n      if (props.onPointerMove) {\n        props.onPointerMove(evt, thisRef);\n      }\n    }\n  };\n  eventManager.watch(events, ref);\n\n  // Clean up\n  return () => {\n    eventManager.off(events);\n  };\n}\n\nexport default function useMapControl(props = {}) {\n  const context = useContext(MapContext);\n  const containerRef = useRef(null);\n  const _thisRef = useRef({props, state: {}, context, containerRef});\n  const thisRef = _thisRef.current;\n\n  thisRef.props = props;\n  thisRef.context = context;\n\n  useEffect(() => onMount(thisRef), [context.eventManager]);\n\n  return thisRef;\n}\n"]},"metadata":{},"sourceType":"module"}