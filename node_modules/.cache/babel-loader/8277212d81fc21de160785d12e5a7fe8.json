{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  KEY_EVENTS\n} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n\n    this.handleEvent = event => {\n      // Ignore if focused on text input\n      const targetElement = event.target || event.srcElement;\n\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n\n      if (this.enableDownEvent && event.type === 'keydown') {\n        this.callback({\n          type: DOWN_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n\n      if (this.enableUpEvent && event.type === 'keyup') {\n        this.callback({\n          type: UP_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    };\n\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    this.events = (this.options.events || []).concat(KEY_EVENTS);\n    element.tabIndex = this.options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n\n\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n}","map":{"version":3,"mappings":"AACA,OAAOA,KAAP,MAAkC,SAAlC;AAEA,SAAQC,iBAAR,QAAgC,cAAhC;AAEA,MAAM;EAACC;AAAD,IAAeD,iBAArB;AACA,MAAME,eAAe,GAAG,SAAxB;AACA,MAAMC,aAAa,GAAG,OAAtB;AAOA,eAAc,MAAOC,QAAP,SAAwBL,KAAxB,CAAkE;EAM9EM,YACEC,OADF,EAEEC,QAFF,EAGEC,OAHF,EAG0B;IAExB,MAAMF,OAAN,EAAeC,QAAf,EAAyBC,OAAzB;;IA6BF,mBAAeC,KAAD,IAAyB;MACrC;MACA,MAAMC,aAAa,GAAID,KAAK,CAACE,MAAN,IAAgBF,KAAK,CAACG,UAA7C;;MACA,IACGF,aAAa,CAACG,OAAd,KAA0B,OAA1B,IAAsCH,aAAkC,CAACI,IAAnC,KAA4C,MAAnF,IACAJ,aAAa,CAACG,OAAd,KAA0B,UAF5B,EAGE;QACA;MACD;;MAED,IAAI,KAAKE,eAAL,IAAwBN,KAAK,CAACK,IAAN,KAAe,SAA3C,EAAsD;QACpD,KAAKP,QAAL,CAAc;UACZO,IAAI,EAAEZ,eADM;UAEZc,QAAQ,EAAEP,KAFE;UAGZQ,GAAG,EAAER,KAAK,CAACQ,GAHC;UAIZN,MAAM,EAAEF,KAAK,CAACE;QAJF,CAAd;MAMD;;MAED,IAAI,KAAKO,aAAL,IAAsBT,KAAK,CAACK,IAAN,KAAe,OAAzC,EAAkD;QAChD,KAAKP,QAAL,CAAc;UACZO,IAAI,EAAEX,aADM;UAEZa,QAAQ,EAAEP,KAFE;UAGZQ,GAAG,EAAER,KAAK,CAACQ,GAHC;UAIZN,MAAM,EAAEF,KAAK,CAACE;QAJF,CAAd;MAMD;IACF,CA3BD;;IA3BE,KAAKI,eAAL,GAAuB,KAAKP,OAAL,CAAaW,MAApC;IACA,KAAKD,aAAL,GAAqB,KAAKV,OAAL,CAAaW,MAAlC;IAEA,KAAKC,MAAL,GAAc,CAAC,KAAKZ,OAAL,CAAaY,MAAb,IAAuB,EAAxB,EAA4BC,MAA5B,CAAmCpB,UAAnC,CAAd;IAEAK,OAAO,CAACgB,QAAR,GAAmB,KAAKd,OAAL,CAAac,QAAb,IAAyB,CAA5C;IACAhB,OAAO,CAACiB,KAAR,CAAcC,OAAd,GAAwB,MAAxB;IACA,KAAKJ,MAAL,CAAYK,OAAZ,CAAoBhB,KAAK,IAAIH,OAAO,CAACoB,gBAAR,CAAyBjB,KAAzB,EAAgC,KAAKkB,WAArC,CAA7B;EACD;;EAEDC,OAAO;IACL,KAAKR,MAAL,CAAYK,OAAZ,CAAoBhB,KAAK,IAAI,KAAKH,OAAL,CAAauB,mBAAb,CAAiCpB,KAAjC,EAAwC,KAAKkB,WAA7C,CAA7B;EACD;EAED;;;;;;EAIAG,eAAe,CAACC,SAAD,EAAoBC,OAApB,EAAoC;IACjD,IAAID,SAAS,KAAK7B,eAAlB,EAAmC;MACjC,KAAKa,eAAL,GAAuBiB,OAAvB;IACD;;IACD,IAAID,SAAS,KAAK5B,aAAlB,EAAiC;MAC/B,KAAKe,aAAL,GAAqBc,OAArB;IACD;EACF;;AAtC6E","names":["Input","INPUT_EVENT_TYPES","KEY_EVENTS","DOWN_EVENT_TYPE","UP_EVENT_TYPE","KeyInput","constructor","element","callback","options","event","targetElement","target","srcElement","tagName","type","enableDownEvent","srcEvent","key","enableUpEvent","enable","events","concat","tabIndex","style","outline","forEach","addEventListener","handleEvent","destroy","removeEventListener","enableEventType","eventType","enabled"],"sourceRoot":"","sources":["../../../src/inputs/key-input.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}