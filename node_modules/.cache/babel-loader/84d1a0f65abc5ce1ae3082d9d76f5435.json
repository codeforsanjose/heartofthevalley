{"ast":null,"code":"import Hammer from './utils/hammer'; // This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\n\nexport const RECOGNIZERS = Hammer ? [[Hammer.Pan, {\n  event: 'tripan',\n  pointers: 3,\n  threshold: 0,\n  enable: false\n}], [Hammer.Rotate, {\n  enable: false\n}], [Hammer.Pinch, {\n  enable: false\n}], [Hammer.Swipe, {\n  enable: false\n}], [Hammer.Pan, {\n  threshold: 0,\n  enable: false\n}], [Hammer.Press, {\n  enable: false\n}], [Hammer.Tap, {\n  event: 'doubletap',\n  taps: 2,\n  enable: false\n}], // TODO - rename to 'tap' and 'singletap' in the next major release\n[Hammer.Tap, {\n  event: 'anytap',\n  enable: false\n}], [Hammer.Tap, {\n  enable: false\n}]] : null; // Recognize the following gestures even if a given recognizer succeeds\n\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n}; // Recognize the folling gestures only if a given recognizer fails\n\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\n\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [// Chrome, Safari\n  'wheel', // IE\n  'mousewheel']\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\n\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\n\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};","map":{"version":3,"mappings":"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","names":["Hammer","RECOGNIZERS","Pan","event","pointers","threshold","enable","Rotate","Pinch","Swipe","Press","Tap","taps","RECOGNIZER_COMPATIBLE_MAP","tripan","rotate","pinch","pan","doubletap","anytap","RECOGNIZER_FALLBACK_MAP","BASIC_EVENT_ALIASES","pointerdown","pointermove","pointerup","touchstart","touchmove","touchend","mousedown","mousemove","mouseup","INPUT_EVENT_TYPES","KEY_EVENTS","MOUSE_EVENTS","WHEEL_EVENTS","EVENT_RECOGNIZER_MAP","tap","press","pinchin","pinchout","pinchstart","pinchmove","pinchend","pinchcancel","rotatestart","rotatemove","rotateend","rotatecancel","tripanstart","tripanmove","tripanup","tripandown","tripanleft","tripanright","tripanend","tripancancel","panstart","panmove","panup","pandown","panleft","panright","panend","pancancel","swipe","swipeleft","swiperight","swipeup","swipedown","GESTURE_EVENT_ALIASES","click","anyclick","dblclick","mouseover","mouseout","mouseleave"],"sourceRoot":"","sources":["../../src/constants.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}