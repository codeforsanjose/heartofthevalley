{"ast":null,"code":"import { worldToLngLat } from './web-mercator-utils';\nimport { mod, log2 } from './math-utils';\nconst TILE_SIZE = 512;\nexport default function normalizeViewportProps(props) {\n  const {\n    width,\n    height,\n    pitch = 0\n  } = props;\n  let {\n    longitude,\n    latitude,\n    zoom,\n    bearing = 0\n  } = props;\n\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  const minZoom = log2(height / TILE_SIZE);\n\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    const halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      const maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    longitude,\n    latitude,\n    zoom,\n    pitch,\n    bearing\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,aAAR,QAA4B,sBAA5B;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAwB,cAAxB;AAGA,MAAMC,SAAS,GAAG,GAAlB;AAkBA,eAAe,SAASC,sBAAT,CAAgCC,KAAhC,EAAqE;EAClF,MAAM;IAACC,KAAD;IAAQC,MAAR;IAAgBC,KAAK,GAAG;EAAxB,IAA6BH,KAAnC;EACA,IAAI;IAACI,SAAD;IAAYC,QAAZ;IAAsBC,IAAtB;IAA4BC,OAAO,GAAG;EAAtC,IAA2CP,KAA/C;;EAGA,IAAII,SAAS,GAAG,CAAC,GAAbA,IAAoBA,SAAS,GAAG,GAApC,EAAyC;IACvCA,SAAS,GAAGR,GAAG,CAACQ,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAHR,GAA4B,GAAxCQ;EACD;;EACD,IAAIG,OAAO,GAAG,CAAC,GAAXA,IAAkBA,OAAO,GAAG,GAAhC,EAAqC;IACnCA,OAAO,GAAGX,GAAG,CAACW,OAAO,GAAG,GAAX,EAAgB,GAAhB,CAAHX,GAA0B,GAApCW;EACD;;EAGD,MAAMC,OAAO,GAAGX,IAAI,CAACK,MAAM,GAAGJ,SAAV,CAApB;;EACA,IAAIQ,IAAI,IAAIE,OAAZ,EAAqB;IACnBF,IAAI,GAAGE,OAAPF;IACAD,QAAQ,GAAG,CAAXA;EAFF,OAGO;IAEL,MAAMI,gBAAgB,GAAGP,MAAM,GAAG,CAATA,GAAaQ,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYJ,IAAZI,CAAtC;IACA,MAAME,WAAW,GAAGjB,aAAa,CAAC,CAAC,CAAD,EAAIc,gBAAJ,CAAD,CAAbd,CAAqC,CAArCA,CAApB;;IACA,IAAIU,QAAQ,GAAGO,WAAf,EAA4B;MAC1BP,QAAQ,GAAGO,WAAXP;IADF,OAEO;MACL,MAAMQ,WAAW,GAAGlB,aAAa,CAAC,CAAC,CAAD,EAAIG,SAAS,GAAGW,gBAAhB,CAAD,CAAbd,CAAiD,CAAjDA,CAApB;;MACA,IAAIU,QAAQ,GAAGQ,WAAf,EAA4B;QAC1BR,QAAQ,GAAGQ,WAAXR;MACD;IACF;EACF;;EAED,OAAO;IAACJ,KAAD;IAAQC,MAAR;IAAgBE,SAAhB;IAA2BC,QAA3B;IAAqCC,IAArC;IAA2CH,KAA3C;IAAkDI;EAAlD,CAAP;AACD","names":["worldToLngLat","mod","log2","TILE_SIZE","normalizeViewportProps","props","width","height","pitch","longitude","latitude","zoom","bearing","minZoom","halfHeightPixels","Math","pow","minLatitude","maxLatitude"],"sources":["../../src/normalize-viewport-props.ts"],"sourcesContent":["import {worldToLngLat} from './web-mercator-utils';\nimport {mod, log2} from './math-utils';\n\n// defined by mapbox-gl\nconst TILE_SIZE = 512;\n\n/** Description of viewport */\nexport type ViewportProps = {\n  width: number;\n  height: number;\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  pitch?: number;\n  bearing?: number;\n};\n\n/**\n * Apply mathematical constraints to viewport props\n * @param props\n */\n// eslint-disable-next-line complexity\nexport default function normalizeViewportProps(props: ViewportProps): ViewportProps {\n  const {width, height, pitch = 0} = props;\n  let {longitude, latitude, zoom, bearing = 0} = props;\n\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  const minZoom = log2(height / TILE_SIZE);\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    // Eliminate white space above and below the map\n    const halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      const maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"]},"metadata":{},"sourceType":"module"}