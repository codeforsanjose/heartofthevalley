{"ast":null,"code":"import { MAPBOX_LIMITS } from './map-state';\n\nfunction decapitalize(s) {\n  return s[0].toLowerCase() + s.slice(1);\n}\n\nexport function checkVisibilityConstraints(props) {\n  var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAPBOX_LIMITS;\n\n  for (var constraintName in constraints) {\n    var type = constraintName.slice(0, 3);\n    var propName = decapitalize(constraintName.slice(3));\n\n    if (type === 'min' && props[propName] < constraints[constraintName]) {\n      return false;\n    }\n\n    if (type === 'max' && props[propName] > constraints[constraintName]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,aAAR,QAA4B,aAA5B;;AAEA,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;EACvB,OAAOA,CAAC,CAAC,CAAD,CAADA,CAAKC,WAALD,KAAqBA,CAAC,CAACE,KAAFF,CAAQ,CAARA,CAA5B;AACD;;AAID,OAAO,SAASG,0BAAT,CAAoCC,KAApC,EAAwE;EAAA,IAA7BC,WAA6B,uEAAfP,aAAe;;EAC7E,KAAK,IAAMQ,cAAX,IAA6BD,WAA7B,EAA0C;IAExC,IAAME,IAAI,GAAGD,cAAc,CAACJ,KAAfI,CAAqB,CAArBA,EAAwB,CAAxBA,CAAb;IACA,IAAME,QAAQ,GAAGT,YAAY,CAACO,cAAc,CAACJ,KAAfI,CAAqB,CAArBA,CAAD,CAA7B;;IAEA,IAAIC,IAAI,KAAK,KAATA,IAAkBH,KAAK,CAACI,QAAD,CAALJ,GAAkBC,WAAW,CAACC,cAAD,CAAnD,EAAqE;MACnE,OAAO,KAAP;IACD;;IACD,IAAIC,IAAI,KAAK,KAATA,IAAkBH,KAAK,CAACI,QAAD,CAALJ,GAAkBC,WAAW,CAACC,cAAD,CAAnD,EAAqE;MACnE,OAAO,KAAP;IACD;EACF;;EACD,OAAO,IAAP;AACD","names":["MAPBOX_LIMITS","decapitalize","s","toLowerCase","slice","checkVisibilityConstraints","props","constraints","constraintName","type","propName"],"sources":["../../../src/utils/map-constraints.js"],"sourcesContent":["import {MAPBOX_LIMITS} from './map-state';\n\nfunction decapitalize(s) {\n  return s[0].toLowerCase() + s.slice(1);\n}\n\n// Checks a visibilityConstraints object to see if the map should be displayed\n// Returns true if props are within the constraints\nexport function checkVisibilityConstraints(props, constraints = MAPBOX_LIMITS) {\n  for (const constraintName in constraints) {\n    // in the format of min* or max*\n    const type = constraintName.slice(0, 3);\n    const propName = decapitalize(constraintName.slice(3));\n\n    if (type === 'min' && props[propName] < constraints[constraintName]) {\n      return false;\n    }\n    if (type === 'max' && props[propName] > constraints[constraintName]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}