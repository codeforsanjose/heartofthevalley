{"ast":null,"code":"import { Manager } from './utils/hammer';\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\nimport EventRegistrar from './utils/event-registrar';\nimport { BASIC_EVENT_ALIASES, EVENT_RECOGNIZER_MAP, GESTURE_EVENT_ALIASES, RECOGNIZERS, RECOGNIZER_COMPATIBLE_MAP, RECOGNIZER_FALLBACK_MAP } from './constants';\nconst DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none',\n  tabIndex: 0\n}; // Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\n\nexport default class EventManager {\n  constructor() {\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    /**\n     * Handle basic events using the 'hammer.input' Hammer.js API:\n     * Before running Recognizers, Hammer emits a 'hammer.input' event\n     * with the basic event info. This function emits all basic events\n     * aliased to the \"class\" of event received.\n     * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n     */\n    this._onBasicInput = event => {\n      const {\n        srcEvent\n      } = event;\n      const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n\n      if (alias) {\n        // fire all events aliased to srcEvent.type\n        this.manager.emit(alias, event);\n      }\n    };\n    /**\n     * Handle events not supported by Hammer.js,\n     * and pipe back out through same (Hammer) channel used by other events.\n     */\n\n\n    this._onOtherEvent = event => {\n      // console.log('onotherevent', event.type, event)\n      this.manager.emit(event.type, event);\n    };\n\n    this.options = { ...DEFAULT_OPTIONS,\n      ...options\n    };\n    this.events = new Map();\n    this.setElement(element); // Register all passed events.\n\n    const {\n      events\n    } = this.options;\n\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  getElement() {\n    return this.element;\n  }\n\n  setElement(element) {\n    if (this.element) {\n      // unregister all events\n      this.destroy();\n    }\n\n    this.element = element;\n\n    if (!element) {\n      return;\n    }\n\n    const {\n      options\n    } = this;\n    const ManagerClass = options.Manager;\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      // Set default recognize withs\n      // http://hammerjs.github.io/recognize-with/\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    } // Set recognizer options\n\n\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName]; // `enable` is managed by the event registrations\n\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    } // Handle events not handled by Hammer.js:\n    // - mouse wheel\n    // - pointer/touch/mouse move\n\n\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    }); // Register all existing events\n\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        // Enable recognizer for this event.\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  } // Tear down internal event management implementations.\n\n\n  destroy() {\n    if (this.element) {\n      // wheelInput etc. are created in setElement() and therefore\n      // cannot exist if there is no element\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n  /** Register an event handler function to be called on `event` */\n\n\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n  /*\n   * Enable/disable recognizer for the given event\n   */\n\n\n  _toggleRecognizer(name, enabled) {\n    const {\n      manager\n    } = this;\n\n    if (!manager) {\n      return;\n    }\n\n    const recognizer = manager.get(name); // @ts-ignore\n\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({\n        enable: enabled\n      });\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n\n      if (fallbackRecognizers && !this.options.recognizers) {\n        // Set default require failures\n        // http://hammerjs.github.io/require-failure/\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n\n          if (enabled) {\n            // Wait for this recognizer to fail\n            otherRecognizer.requireFailure(name);\n            /**\n             * This seems to be a bug in hammerjs:\n             * requireFailure() adds both ways\n             * dropRequireFailure() only drops one way\n             * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n               recognizer-constructor.js#L136\n             */\n\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            // Do not wait for this recognizer to fail\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n  /**\n   * Process the event registration for a single event + handler.\n   */\n\n\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      // @ts-ignore\n      opts = handler; // If `event` is a map, call `on()` for each entry.\n\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n\n      return;\n    }\n\n    const {\n      manager,\n      events\n    } = this; // Alias to a recognized gesture as necessary.\n\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n    let eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar); // Enable recognizer for this event.\n\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias; // Listen to the event\n\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n\n    eventRegistrar.add(event, handler, opts, once, passive);\n\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n  /**\n   * Process the event deregistration for a single event + handler.\n   */\n\n\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      // If `event` is a map, call `off()` for each entry.\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n\n      return;\n    }\n\n    const {\n      events\n    } = this; // Alias to a recognized gesture as necessary.\n\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {\n        recognizerName\n      } = eventRegistrar; // Disable recognizer if no more handlers are attached to its events\n\n      let isRecognizerUsed = false;\n\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Manager","WheelInput","MoveInput","KeyInput","ContextmenuInput","EventRegistrar","BASIC_EVENT_ALIASES","EVENT_RECOGNIZER_MAP","GESTURE_EVENT_ALIASES","RECOGNIZERS","RECOGNIZER_COMPATIBLE_MAP","RECOGNIZER_FALLBACK_MAP","DEFAULT_OPTIONS","events","recognizers","recognizerOptions","touchAction","tabIndex","EventManager","constructor","element","options","event","srcEvent","alias","type","manager","emit","Map","setElement","on","getElement","destroy","ManagerClass","_onBasicInput","Object","keys","forEach","name","recognizer","get","otherName","recognizeWith","recognizerName","recognizerOption","enable","set","wheelInput","_onOtherEvent","moveInput","keyInput","contextmenuInput","eventAlias","eventRegistrar","isEmpty","_toggleRecognizer","handleEvent","handler","opts","_addEventHandler","once","watch","off","_removeEventHandler","enabled","fallbackRecognizers","otherRecognizer","requireFailure","dropRequireFailure","enableEventType","passive","eventName","add","remove","isRecognizerUsed","eh","values"],"sourceRoot":"","sources":["../../src/event-manager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}