{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useRef, useEffect, useState, useCallback, useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport { document } from '../utils/globals';\nimport mapboxgl from '../utils/mapboxgl';\nimport MapState from '../utils/map-state';\nimport { LINEAR_TRANSITION_PROPS } from '../utils/map-controller';\nimport { isGeolocationSupported } from '../utils/geolocate-utils';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\n\nvar noop = function noop() {};\n\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  label: PropTypes.string,\n  disabledLabel: PropTypes.string,\n  auto: PropTypes.bool,\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n  showAccuracyCircle: PropTypes.bool,\n  showUserHeading: PropTypes.bool,\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onGeolocate: PropTypes.func\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  label: 'Find My Location',\n  disabledLabel: 'Location Not Available',\n  auto: false,\n  positionOptions: {\n    enableHighAccuracy: false,\n    timeout: 6000\n  },\n  fitBoundsOptions: {\n    maxZoom: 15\n  },\n  trackUserLocation: false,\n  showUserLocation: true,\n  showUserHeading: false,\n  showAccuracyCircle: true,\n  onGeolocate: function onGeolocate() {}\n});\n\nfunction getBounds(position) {\n  var center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n  var radius = position.coords.accuracy;\n  var bounds = center.toBounds(radius);\n  return [[bounds._ne.lng, bounds._ne.lat], [bounds._sw.lng, bounds._sw.lat]];\n}\n\nfunction setupMapboxGeolocateControl(context, props, geolocateButton) {\n  var control = new mapboxgl.GeolocateControl(props);\n  control._container = document.createElement('div');\n  control._map = {\n    on: function on() {},\n    _getUIString: function _getUIString() {\n      return '';\n    }\n  };\n\n  control._setupUI(true);\n\n  control._map = context.map;\n  control._geolocateButton = geolocateButton;\n  var eventManager = context.eventManager;\n\n  if (control.options.trackUserLocation && eventManager) {\n    eventManager.on('panstart', function () {\n      if (control._watchState === 'ACTIVE_LOCK') {\n        control._watchState = 'BACKGROUND';\n        geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');\n        geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');\n      }\n    });\n  }\n\n  control.on('geolocate', props.onGeolocate);\n  return control;\n}\n\nfunction updateCamera(position, _ref) {\n  var context = _ref.context,\n      props = _ref.props;\n  var bounds = getBounds(position);\n\n  var _context$viewport$fit = context.viewport.fitBounds(bounds, props.fitBoundsOptions),\n      longitude = _context$viewport$fit.longitude,\n      latitude = _context$viewport$fit.latitude,\n      zoom = _context$viewport$fit.zoom;\n\n  var newViewState = Object.assign({}, context.viewport, {\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom\n  });\n  var mapState = new MapState(newViewState);\n  var viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n  var onViewportChange = props.onViewportChange || context.onViewportChange || noop;\n  var onViewStateChange = props.onViewStateChange || context.onViewStateChange || noop;\n  onViewStateChange({\n    viewState: viewState\n  });\n  onViewportChange(viewState);\n}\n\nfunction GeolocateControl(props) {\n  var thisRef = useMapControl(props);\n  var context = thisRef.context,\n      containerRef = thisRef.containerRef;\n  var geolocateButtonRef = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      mapboxGeolocateControl = _useState2[0],\n      createMapboxGeolocateControl = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      supportsGeolocation = _useState4[0],\n      setSupportsGeolocation = _useState4[1];\n\n  useEffect(function () {\n    var control;\n\n    if (context.map) {\n      isGeolocationSupported().then(function (result) {\n        setSupportsGeolocation(result);\n\n        if (geolocateButtonRef.current) {\n          control = setupMapboxGeolocateControl(context, props, geolocateButtonRef.current);\n\n          control._updateCamera = function (position) {\n            return updateCamera(position, thisRef);\n          };\n\n          createMapboxGeolocateControl(control);\n        }\n      });\n    }\n\n    return function () {\n      if (control) {\n        control._clearWatch();\n      }\n    };\n  }, [context.map]);\n  var triggerGeolocate = useCallback(function () {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl.options = thisRef.props;\n      mapboxGeolocateControl.trigger();\n    }\n  }, [mapboxGeolocateControl]);\n  useEffect(function () {\n    if (props.auto) {\n      triggerGeolocate();\n    }\n  }, [mapboxGeolocateControl, props.auto]);\n  useEffect(function () {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl._onZoom();\n    }\n  }, [context.viewport.zoom]);\n  var className = props.className,\n      label = props.label,\n      disabledLabel = props.disabledLabel,\n      trackUserLocation = props.trackUserLocation;\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"div\", {\n    key: \"geolocate-control\",\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-group\",\n    ref: containerRef\n  }, React.createElement(\"button\", {\n    key: \"geolocate\",\n    className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate\",\n    ref: geolocateButtonRef,\n    disabled: !supportsGeolocation,\n    \"aria-pressed\": !trackUserLocation,\n    type: \"button\",\n    title: supportsGeolocation ? label : disabledLabel,\n    \"aria-label\": supportsGeolocation ? label : disabledLabel,\n    onClick: triggerGeolocate\n  }, React.createElement(\"span\", {\n    className: \"mapboxgl-ctrl-icon\",\n    \"aria-hidden\": \"true\"\n  }))));\n}\n\nGeolocateControl.propTypes = propTypes;\nGeolocateControl.defaultProps = defaultProps;\nexport default React.memo(GeolocateControl);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkDC,OAAlD,QAAgE,OAAhE;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAAQC,uBAAR,QAAsC,yBAAtC;AACA,SAAQC,sBAAR,QAAqC,0BAArC;AAEA,OAAOC,aAAP,IAAuBC,sBAAvB,EAA+CC,mBAA/C,QAAyE,mBAAzE;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB;;AAEA,IAAMC,SAAS,GAAGC,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBH,mBAAlBG,EAAuC;EAEvDE,SAAS,EAAEb,SAAS,CAACc,MAFkC;EAGvDC,KAAK,EAAEf,SAAS,CAACgB,MAHsC;EAKvDC,KAAK,EAAEjB,SAAS,CAACc,MALsC;EAMvDI,aAAa,EAAElB,SAAS,CAACc,MAN8B;EAQvDK,IAAI,EAAEnB,SAAS,CAACoB,IARuC;EAYvDC,eAAe,EAAErB,SAAS,CAACgB,MAZ4B;EAavDM,gBAAgB,EAAEtB,SAAS,CAACgB,MAb2B;EAcvDO,iBAAiB,EAAEvB,SAAS,CAACoB,IAd0B;EAevDI,gBAAgB,EAAExB,SAAS,CAACoB,IAf2B;EAgBvDK,kBAAkB,EAAEzB,SAAS,CAACoB,IAhByB;EAiBvDM,eAAe,EAAE1B,SAAS,CAACoB,IAjB4B;EAqBvDO,iBAAiB,EAAE3B,SAAS,CAAC4B,IArB0B;EAsBvDC,gBAAgB,EAAE7B,SAAS,CAAC4B,IAtB2B;EAwBvDE,WAAW,EAAE9B,SAAS,CAAC4B;AAxBgC,CAAvCjB,CAAlB;AA2BA,IAAMoB,YAAY,GAAGpB,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBJ,sBAAlBI,EAA0C;EAC7DE,SAAS,EAAE,EADkD;EAE7DI,KAAK,EAAE,kBAFsD;EAG7DC,aAAa,EAAE,wBAH8C;EAI7DC,IAAI,EAAE,KAJuD;EAO7DE,eAAe,EAAE;IAACW,kBAAkB,EAAE,KAArB;IAA4BC,OAAO,EAAE;EAArC,CAP4C;EAQ7DX,gBAAgB,EAAE;IAACY,OAAO,EAAE;EAAV,CAR2C;EAS7DX,iBAAiB,EAAE,KAT0C;EAU7DC,gBAAgB,EAAE,IAV2C;EAW7DE,eAAe,EAAE,KAX4C;EAY7DD,kBAAkB,EAAE,IAZyC;EAc7DK,WAAW,EAAE,uBAAM,CAAE;AAdwC,CAA1CnB,CAArB;;AAiBA,SAASwB,SAAT,CAAmBC,QAAnB,EAA6B;EAC3B,IAAMC,MAAM,GAAG,IAAInC,QAAQ,CAACoC,MAAb,CAAoBF,QAAQ,CAACG,MAATH,CAAgBI,SAApC,EAA+CJ,QAAQ,CAACG,MAATH,CAAgBK,QAA/D,CAAf;EACA,IAAMC,MAAM,GAAGN,QAAQ,CAACG,MAATH,CAAgBO,QAA/B;EACA,IAAMC,MAAM,GAAGP,MAAM,CAACQ,QAAPR,CAAgBK,MAAhBL,CAAf;EAEA,OAAO,CACL,CAACO,MAAM,CAACE,GAAPF,CAAWG,GAAZ,EAAiBH,MAAM,CAACE,GAAPF,CAAWI,GAA5B,CADK,EAEL,CAACJ,MAAM,CAACK,GAAPL,CAAWG,GAAZ,EAAiBH,MAAM,CAACK,GAAPL,CAAWI,GAA5B,CAFK,CAAP;AAID;;AAED,SAASE,2BAAT,CAAqCC,OAArC,EAA8CC,KAA9C,EAAqDC,eAArD,EAAsE;EACpE,IAAMC,OAAO,GAAG,IAAIpD,QAAQ,CAACqD,gBAAb,CAA8BH,KAA9B,CAAhB;EAGAE,OAAO,CAACE,UAARF,GAAqBrD,QAAQ,CAACwD,aAATxD,CAAuB,KAAvBA,CAArBqD;EACAA,OAAO,CAACI,IAARJ,GAAe;IACbK,EAAE,EAAE,cAAM,CADG;IAEbC,YAAY,EAAE;MAAA,OAAM,EAAN;IAAA;EAFD,CAAfN;;EAIAA,OAAO,CAACO,QAARP,CAAiB,IAAjBA;;EACAA,OAAO,CAACI,IAARJ,GAAeH,OAAO,CAACW,GAAvBR;EAGAA,OAAO,CAACS,gBAART,GAA2BD,eAA3BC;EAboE,IAkB7DU,YAlB6D,GAkB7Cb,OAlB6C,CAkB7Da,YAlB6D;;EAmBpE,IAAIV,OAAO,CAACW,OAARX,CAAgB/B,iBAAhB+B,IAAqCU,YAAzC,EAAuD;IACrDA,YAAY,CAACL,EAAbK,CAAgB,UAAhBA,EAA4B,YAAM;MAChC,IAAIV,OAAO,CAACY,WAARZ,KAAwB,aAA5B,EAA2C;QACzCA,OAAO,CAACY,WAARZ,GAAsB,YAAtBA;QACAD,eAAe,CAACc,SAAhBd,CAA0Be,GAA1Bf,CAA8B,oCAA9BA;QACAA,eAAe,CAACc,SAAhBd,CAA0BgB,MAA1BhB,CAAiC,gCAAjCA;MACD;IALH;EAOD;;EAEDC,OAAO,CAACK,EAARL,CAAW,WAAXA,EAAwBF,KAAK,CAACtB,WAA9BwB;EACA,OAAOA,OAAP;AACD;;AAED,SAASgB,YAAT,CAAsBlC,QAAtB,QAAkD;EAAA,IAAjBe,OAAiB,QAAjBA,OAAiB;EAAA,IAARC,KAAQ,QAARA,KAAQ;EAChD,IAAMR,MAAM,GAAGT,SAAS,CAACC,QAAD,CAAxB;;EADgD,4BAEZe,OAAO,CAACoB,QAARpB,CAAiBqB,SAAjBrB,CAA2BP,MAA3BO,EAAmCC,KAAK,CAAC9B,gBAAzC6B,CAFY;EAAA,IAEzCX,SAFyC,yBAEzCA,SAFyC;EAAA,IAE9BC,QAF8B,yBAE9BA,QAF8B;EAAA,IAEpBgC,IAFoB,yBAEpBA,IAFoB;;EAIhD,IAAMC,YAAY,GAAG/D,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBwC,OAAO,CAACoB,QAA1B5D,EAAoC;IACvD6B,SAAS,EAATA,SADuD;IAEvDC,QAAQ,EAARA,QAFuD;IAGvDgC,IAAI,EAAJA;EAHuD,CAApC9D,CAArB;EAKA,IAAMgE,QAAQ,GAAG,IAAIxE,QAAJ,CAAauE,YAAb,CAAjB;EACA,IAAME,SAAS,GAAGjE,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBgE,QAAQ,CAACE,gBAATF,EAAlBhE,EAA+CP,uBAA/CO,CAAlB;EAEA,IAAMkB,gBAAgB,GAAGuB,KAAK,CAACvB,gBAANuB,IAA0BD,OAAO,CAACtB,gBAAlCuB,IAAsD3C,IAA/E;EACA,IAAMkB,iBAAiB,GAAGyB,KAAK,CAACzB,iBAANyB,IAA2BD,OAAO,CAACxB,iBAAnCyB,IAAwD3C,IAAlF;EAGAkB,iBAAiB,CAAC;IAACiD,SAAS,EAATA;EAAD,CAAD,CAAjBjD;EAGAE,gBAAgB,CAAC+C,SAAD,CAAhB/C;AACD;;AAED,SAAS0B,gBAAT,CAA0BH,KAA1B,EAAiC;EAC/B,IAAM0B,OAAO,GAAGxE,aAAa,CAAC8C,KAAD,CAA7B;EAD+B,IAExBD,OAFwB,GAEC2B,OAFD,CAExB3B,OAFwB;EAAA,IAEf4B,YAFe,GAECD,OAFD,CAEfC,YAFe;EAG/B,IAAMC,kBAAkB,GAAGrF,MAAM,CAAC,IAAD,CAAjC;;EAH+B,gBAIgCE,QAAQ,CAAC,IAAD,CAJxC;EAAA;EAAA,IAIxBoF,sBAJwB;EAAA,IAIAC,4BAJA;;EAAA,iBAKuBrF,QAAQ,CAAC,KAAD,CAL/B;EAAA;EAAA,IAKxBsF,mBALwB;EAAA,IAKHC,sBALG;;EAO/BxF,SAAS,CAAC,YAAM;IACd,IAAI0D,OAAJ;;IAEA,IAAIH,OAAO,CAACW,GAAZ,EAAiB;MACfzD,sBAAsB,GAAGgF,IAAzBhF,CAA8B,kBAAU;QACtC+E,sBAAsB,CAACE,MAAD,CAAtBF;;QAEA,IAAIJ,kBAAkB,CAACO,OAAvB,EAAgC;UAC9BjC,OAAO,GAAGJ,2BAA2B,CAACC,OAAD,EAAUC,KAAV,EAAiB4B,kBAAkB,CAACO,OAApC,CAArCjC;;UAEAA,OAAO,CAACkC,aAARlC,GAAwB,oBAAQ;YAAA,OAAIgB,YAAY,CAAClC,QAAD,EAAW0C,OAAX,CAAhB;UAAhC;;UACAI,4BAA4B,CAAC5B,OAAD,CAA5B4B;QACD;MARH;IAUD;;IAED,OAAO,YAAM;MACX,IAAI5B,OAAJ,EAAa;QACXA,OAAO,CAACmC,WAARnC;MACD;IAHH;EAhBO,GAqBN,CAACH,OAAO,CAACW,GAAT,CArBM,CAATlE;EAuBA,IAAM8F,gBAAgB,GAAG5F,WAAW,CAAC,YAAM;IACzC,IAAImF,sBAAJ,EAA4B;MAC1BA,sBAAsB,CAAChB,OAAvBgB,GAAiCH,OAAO,CAAC1B,KAAzC6B;MACAA,sBAAsB,CAACU,OAAvBV;IACD;EAJiC,GAKjC,CAACA,sBAAD,CALiC,CAApC;EAOArF,SAAS,CAAC,YAAM;IACd,IAAIwD,KAAK,CAACjC,IAAV,EAAgB;MACduE,gBAAgB;IACjB;EAHM,GAIN,CAACT,sBAAD,EAAyB7B,KAAK,CAACjC,IAA/B,CAJM,CAATvB;EAMAA,SAAS,CAAC,YAAM;IACd,IAAIqF,sBAAJ,EAA4B;MAC1BA,sBAAsB,CAACW,OAAvBX;IACD;EAHM,GAIN,CAAC9B,OAAO,CAACoB,QAARpB,CAAiBsB,IAAlB,CAJM,CAAT7E;EA3C+B,IAiDxBiB,SAjDwB,GAiD8BuC,KAjD9B,CAiDxBvC,SAjDwB;EAAA,IAiDbI,KAjDa,GAiD8BmC,KAjD9B,CAiDbnC,KAjDa;EAAA,IAiDNC,aAjDM,GAiD8BkC,KAjD9B,CAiDNlC,aAjDM;EAAA,IAiDSK,iBAjDT,GAiD8B6B,KAjD9B,CAiDS7B,iBAjDT;EAmD/B,IAAMR,KAAK,GAAGhB,OAAO,CAAC;IAAA;MAAQqC,QAAQ,EAAE;IAAlB,GAAiCgB,KAAK,CAACrC,KAAvC;EAAD,GAAiD,CAACqC,KAAK,CAACrC,KAAP,CAAjD,CAArB;EAEA,OACErB;IAAKqB,KAAK,EAAEA,KAAZ;IAAmBF,SAAS,EAAEA;EAA9B,GACEnB;IAAKmG,GAAG,EAAC,mBAAT;IAA6BhF,SAAS,EAAC,mCAAvC;IAA2EiF,GAAG,EAAEf;EAAhF,GACErF;IACEmG,GAAG,EAAC,WADN;IAEEhF,SAAS,8CAFX;IAGEiF,GAAG,EAAEd,kBAHP;IAIEe,QAAQ,EAAE,CAACZ,mBAJb;IAKE,gBAAc,CAAC5D,iBALjB;IAMEyE,IAAI,EAAC,QANP;IAOEC,KAAK,EAAEd,mBAAmB,GAAGlE,KAAH,GAAWC,aAPvC;IAQE,cAAYiE,mBAAmB,GAAGlE,KAAH,GAAWC,aAR5C;IASEgF,OAAO,EAAER;EATX,GAWEhG;IAAMmB,SAAS,EAAC,oBAAhB;IAAqC,eAAY;EAAjD,EAXF,CADF,CADF,CADF;AAmBD;;AAED0C,gBAAgB,CAAC7C,SAAjB6C,GAA6B7C,SAA7B6C;AACAA,gBAAgB,CAACxB,YAAjBwB,GAAgCxB,YAAhCwB;AAEA,eAAe7D,KAAK,CAACyG,IAANzG,CAAW6D,gBAAX7D,CAAf","names":["React","useRef","useEffect","useState","useCallback","useMemo","PropTypes","document","mapboxgl","MapState","LINEAR_TRANSITION_PROPS","isGeolocationSupported","useMapControl","mapControlDefaultProps","mapControlPropTypes","noop","propTypes","Object","assign","className","string","style","object","label","disabledLabel","auto","bool","positionOptions","fitBoundsOptions","trackUserLocation","showUserLocation","showAccuracyCircle","showUserHeading","onViewStateChange","func","onViewportChange","onGeolocate","defaultProps","enableHighAccuracy","timeout","maxZoom","getBounds","position","center","LngLat","coords","longitude","latitude","radius","accuracy","bounds","toBounds","_ne","lng","lat","_sw","setupMapboxGeolocateControl","context","props","geolocateButton","control","GeolocateControl","_container","createElement","_map","on","_getUIString","_setupUI","map","_geolocateButton","eventManager","options","_watchState","classList","add","remove","updateCamera","viewport","fitBounds","zoom","newViewState","mapState","viewState","getViewportProps","thisRef","containerRef","geolocateButtonRef","mapboxGeolocateControl","createMapboxGeolocateControl","supportsGeolocation","setSupportsGeolocation","then","result","current","_updateCamera","_clearWatch","triggerGeolocate","trigger","_onZoom","key","ref","disabled","type","title","onClick","memo"],"sources":["../../../src/components/geolocate-control.js"],"sourcesContent":["import * as React from 'react';\nimport {useRef, useEffect, useState, useCallback, useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {document} from '../utils/globals';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport MapState from '../utils/map-state';\nimport {LINEAR_TRANSITION_PROPS} from '../utils/map-controller';\nimport {isGeolocationSupported} from '../utils/geolocate-utils';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst noop = () => {};\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  // Custom label assigned to the control\n  label: PropTypes.string,\n  disabledLabel: PropTypes.string,\n  // Auto trigger instead of waiting for click\n  auto: PropTypes.bool,\n\n  // mapbox geolocate options\n  // https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n  showAccuracyCircle: PropTypes.bool,\n  showUserHeading: PropTypes.bool,\n\n  // Callbacks fired when the user interacted with the map. The object passed to the callbacks\n  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n\n  onGeolocate: PropTypes.func\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  label: 'Find My Location',\n  disabledLabel: 'Location Not Available',\n  auto: false,\n\n  // mapbox geolocate options\n  positionOptions: {enableHighAccuracy: false, timeout: 6000},\n  fitBoundsOptions: {maxZoom: 15},\n  trackUserLocation: false,\n  showUserLocation: true,\n  showUserHeading: false,\n  showAccuracyCircle: true,\n\n  onGeolocate: () => {}\n});\n\nfunction getBounds(position) {\n  const center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n  const radius = position.coords.accuracy;\n  const bounds = center.toBounds(radius);\n\n  return [\n    [bounds._ne.lng, bounds._ne.lat],\n    [bounds._sw.lng, bounds._sw.lat]\n  ];\n}\n\nfunction setupMapboxGeolocateControl(context, props, geolocateButton) {\n  const control = new mapboxgl.GeolocateControl(props);\n\n  // Dummy placeholders so that _setupUI does not crash\n  control._container = document.createElement('div');\n  control._map = {\n    on: () => {},\n    _getUIString: () => ''\n  };\n  control._setupUI(true);\n  control._map = context.map;\n\n  // replace mapbox internal UI elements with ours\n  control._geolocateButton = geolocateButton;\n\n  // From _setupUI\n  // when the camera is changed (and it's not as a result of the Geolocation Control) change\n  // the watch mode to background watch, so that the marker is updated but not the camera.\n  const {eventManager} = context;\n  if (control.options.trackUserLocation && eventManager) {\n    eventManager.on('panstart', () => {\n      if (control._watchState === 'ACTIVE_LOCK') {\n        control._watchState = 'BACKGROUND';\n        geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');\n        geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');\n      }\n    });\n  }\n\n  control.on('geolocate', props.onGeolocate);\n  return control;\n}\n\nfunction updateCamera(position, {context, props}) {\n  const bounds = getBounds(position);\n  const {longitude, latitude, zoom} = context.viewport.fitBounds(bounds, props.fitBoundsOptions);\n\n  const newViewState = Object.assign({}, context.viewport, {\n    longitude,\n    latitude,\n    zoom\n  });\n  const mapState = new MapState(newViewState);\n  const viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n\n  const onViewportChange = props.onViewportChange || context.onViewportChange || noop;\n  const onViewStateChange = props.onViewStateChange || context.onViewStateChange || noop;\n\n  // Call new style callback\n  onViewStateChange({viewState});\n\n  // Call old style callback\n  onViewportChange(viewState);\n}\n\nfunction GeolocateControl(props) {\n  const thisRef = useMapControl(props);\n  const {context, containerRef} = thisRef;\n  const geolocateButtonRef = useRef(null);\n  const [mapboxGeolocateControl, createMapboxGeolocateControl] = useState(null);\n  const [supportsGeolocation, setSupportsGeolocation] = useState(false);\n\n  useEffect(() => {\n    let control;\n\n    if (context.map) {\n      isGeolocationSupported().then(result => {\n        setSupportsGeolocation(result);\n\n        if (geolocateButtonRef.current) {\n          control = setupMapboxGeolocateControl(context, props, geolocateButtonRef.current);\n          // Overwrite Mapbox's GeolocateControl internal method\n          control._updateCamera = position => updateCamera(position, thisRef);\n          createMapboxGeolocateControl(control);\n        }\n      });\n    }\n\n    return () => {\n      if (control) {\n        control._clearWatch();\n      }\n    };\n  }, [context.map]);\n\n  const triggerGeolocate = useCallback(() => {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl.options = thisRef.props;\n      mapboxGeolocateControl.trigger();\n    }\n  }, [mapboxGeolocateControl]);\n\n  useEffect(() => {\n    if (props.auto) {\n      triggerGeolocate();\n    }\n  }, [mapboxGeolocateControl, props.auto]);\n\n  useEffect(() => {\n    if (mapboxGeolocateControl) {\n      mapboxGeolocateControl._onZoom();\n    }\n  }, [context.viewport.zoom]);\n\n  const {className, label, disabledLabel, trackUserLocation} = props;\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  return (\n    <div style={style} className={className}>\n      <div key=\"geolocate-control\" className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key=\"geolocate\"\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate`}\n          ref={geolocateButtonRef}\n          disabled={!supportsGeolocation}\n          aria-pressed={!trackUserLocation}\n          type=\"button\"\n          title={supportsGeolocation ? label : disabledLabel}\n          aria-label={supportsGeolocation ? label : disabledLabel}\n          onClick={triggerGeolocate}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nGeolocateControl.propTypes = propTypes;\nGeolocateControl.defaultProps = defaultProps;\n\nexport default React.memo(GeolocateControl);\n"]},"metadata":{},"sourceType":"module"}