{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nexport default class WebMercatorViewport {\n  constructor() {\n    var _this = this;\n\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    };\n\n    _defineProperty(this, \"latitude\", void 0);\n\n    _defineProperty(this, \"longitude\", void 0);\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"pitch\", void 0);\n\n    _defineProperty(this, \"bearing\", void 0);\n\n    _defineProperty(this, \"altitude\", void 0);\n\n    _defineProperty(this, \"fovy\", void 0);\n\n    _defineProperty(this, \"meterOffset\", void 0);\n\n    _defineProperty(this, \"center\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"scale\", void 0);\n\n    _defineProperty(this, \"distanceScales\", void 0);\n\n    _defineProperty(this, \"viewMatrix\", void 0);\n\n    _defineProperty(this, \"projectionMatrix\", void 0);\n\n    _defineProperty(this, \"viewProjectionMatrix\", void 0);\n\n    _defineProperty(this, \"pixelProjectionMatrix\", void 0);\n\n    _defineProperty(this, \"pixelUnprojectionMatrix\", void 0);\n\n    _defineProperty(this, \"equals\", viewport => {\n      if (!(viewport instanceof WebMercatorViewport)) {\n        return false;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && mat4.equals(viewport.viewMatrix, this.viewMatrix);\n    });\n\n    _defineProperty(this, \"project\", function (lngLatZ) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        topLeft = true\n      } = options;\n\n      const worldPosition = _this.projectPosition(lngLatZ);\n\n      const coord = worldToPixels(worldPosition, _this.pixelProjectionMatrix);\n      const [x, y] = coord;\n      const y2 = topLeft ? y : _this.height - y;\n      return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    });\n\n    _defineProperty(this, \"unproject\", function (xyz) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        topLeft = true,\n        targetZ = undefined\n      } = options;\n      const [x, y, z] = xyz;\n      const y2 = topLeft ? y : _this.height - y;\n      const targetZWorld = targetZ && targetZ * _this.distanceScales.unitsPerMeter[2];\n      const coord = pixelsToWorld([x, y2, z], _this.pixelUnprojectionMatrix, targetZWorld);\n\n      const [X, Y, Z] = _this.unprojectPosition(coord);\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    });\n\n    _defineProperty(this, \"projectPosition\", xyz => {\n      const [X, Y] = lngLatToWorld(xyz);\n      const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    });\n\n    _defineProperty(this, \"unprojectPosition\", xyz => {\n      const [X, Y] = worldToLngLat(xyz);\n      const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    });\n\n    let {\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n    width = width || 1;\n    height = height || 1;\n\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    const distanceScales = getDistanceScales({\n      longitude,\n      latitude\n    });\n    const center = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {\n      width,\n      height,\n      projectionMatrix,\n      viewMatrix\n    } = this;\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n    const m = createMat4();\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n    const mInverse = mat4.invert(createMat4(), m);\n\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  getMapCenterByLngLatPosition(_ref) {\n    let {\n      lngLat,\n      pos\n    } = _ref;\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  fitBounds(bounds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds(Object.assign({\n      width,\n      height,\n      bounds\n    }, options));\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n    const west = Math.min(...corners.map(p => p[0]));\n    const east = Math.max(...corners.map(p => p[0]));\n    const south = Math.min(...corners.map(p => p[1]));\n    const north = Math.max(...corners.map(p => p[1]));\n    return [[west, south], [east, north]];\n  }\n\n  getBoundingRegion() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getBounds(this, options.z || 0);\n  }\n\n  getLocationAtPoint(_ref2) {\n    let {\n      lngLat,\n      pos\n    } = _ref2;\n    return this.getMapCenterByLngLatPosition({\n      lngLat,\n      pos\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","props","width","height","_defineProperty","viewport","equals","projectionMatrix","viewMatrix","lngLatZ","options","topLeft","worldPosition","projectPosition","coord","pixelProjectionMatrix","x","y","y2","length","xyz","targetZ","undefined","z","targetZWorld","distanceScales","unitsPerMeter","pixelUnprojectionMatrix","X","Y","Z","unprojectPosition","Number","isFinite","metersPerUnit","altitude","fovy","latitude","longitude","zoom","pitch","bearing","position","nearZMultiplier","farZMultiplier","scale","Math","max","center","push","add","mul","meterOffset","_initMatrices","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","toLocation","negate","newCenter","bounds","assign","corners","getBoundingRegion","west","min","map","p","east","south","north","getLocationAtPoint"],"sources":["../../src/web-mercator-viewport.ts"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix,\n  DistanceScales\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport type {FitBoundsOptions} from './fit-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\n/**\n   * @param width=1 - Width of \"viewport\" or window\n   * @param height=1 - Height of \"viewport\" or window\n   * @param scale=1 - Either use scale or zoom\n   * @param pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param fovy= - Field of view of camera in degrees\n   * @param altitude= - Altitude of camera in screen units                                                               \n   *\n   * Web mercator projection short-hand parameters\n   * @param latitude - Center of viewport on map\n   * @param longitude - Center of viewport on map\n   * @param zoom - Scale = Math.pow(2,zoom) on map\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - Field of view is independent from altitude, provide `altitudeToFovy(1.5)` (default value) to match assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n */\nexport type WebMercatorViewportProps = {\n  // Map state\n  width: number;\n  height: number;\n  latitude?: number;\n  longitude?: number;\n  position?: number[];\n  zoom?: number;\n  pitch?: number;\n  bearing?: number;\n  altitude?: number;\n  fovy?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n};\n\n/**\n * The WebMercatorViewport class creates\n * - view/projection matrices\n * - \"uniform values\" (for shaders) from mercator params\n *\n * Note: Instances are immutable in the sense that they only have accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class WebMercatorViewport {\n  readonly latitude: number;\n  readonly longitude: number;\n  readonly zoom: number;\n  readonly pitch: number;\n  readonly bearing: number;\n  readonly altitude: number;\n  readonly fovy: number;\n\n  readonly meterOffset: number[];\n  readonly center: number[];\n\n  readonly width: number;\n  readonly height: number;\n  readonly scale: number;\n  readonly distanceScales: DistanceScales;\n\n  readonly viewMatrix: number[];\n  readonly projectionMatrix: number[];\n\n  viewProjectionMatrix: number[];\n  pixelProjectionMatrix: number[];\n  pixelUnprojectionMatrix: number[];\n\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(props: WebMercatorViewportProps = {width: 1, height: 1}) {\n    let {\n      // Map state\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center: number[] = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices(): void {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  /** Two viewports are equal if width and height are identical, and if\n   * their view and projection matrices are (approximately) equal.\n   */\n  equals = (viewport: WebMercatorViewport | null): boolean => {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  };\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project = (lngLatZ: number[], options: {topLeft?: boolean} = {}): number[] => {\n    const {topLeft = true} = options;\n    const worldPosition = this.projectPosition(lngLatZ);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  };\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.\n   *\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   *\n   * @param xyz - screen coordinates, z as pixel depth\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject = (xyz: number[], options: {topLeft?: boolean; targetZ?: number} = {}): number[] => {\n    const {topLeft = true, targetZ = undefined} = options;\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  };\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  };\n\n  unprojectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  };\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return [x,y] coordinates.\n   */\n  projectFlat(lngLat: number[]): number[] {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param xy - array with [x,y] members\n   *  representing point on projected map plane\n   * @return - array with [lat,lon] of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy: number[]): number[] {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n   * @param opt\n   * @param opt.lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param opt.pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param bounds - [[lon, lat], [lon, lat]]\n   * @param [options]\n   * @param [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(\n    bounds: [[number, number], [number, number]],\n    options: Omit<FitBoundsOptions, 'width' | 'height' | 'bounds'> = {}\n  ): WebMercatorViewport {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} bounds - [[lon, lat], [lon, lat]]\n   */\n  getBounds(options?: {z?: number}): number[][] {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} an array of 4 points that define the visible region\n   */\n  getBoundingRegion(options: {z?: number} = {}): number[][] {\n    return getBounds(this, options.z || 0);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated Legacy method name */\n  getLocationAtPoint({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}