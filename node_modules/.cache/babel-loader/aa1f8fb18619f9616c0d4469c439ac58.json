{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport assert from './assert';\nimport { LinearInterpolator } from './transition';\nimport MapState from './map-state';\n\nvar noop = function noop() {};\n\nexport function cropEasingFunction(easing, x0) {\n  var y0 = easing(x0);\n  return function (t) {\n    return 1 / (1 - y0) * (easing(t * (1 - x0) + x0) - y0);\n  };\n}\nexport var TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\nvar DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nvar TransitionManager = function () {\n  function TransitionManager() {\n    var _this = this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TransitionManager);\n\n    _defineProperty(this, \"_animationFrame\", null);\n\n    _defineProperty(this, \"_onTransitionFrame\", function () {\n      _this._animationFrame = requestAnimationFrame(_this._onTransitionFrame);\n\n      _this._updateViewport();\n    });\n\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _createClass(TransitionManager, [{\n    key: \"getViewportInTransition\",\n    value: function getViewportInTransition() {\n      return this._animationFrame ? this.state.propsInTransition : null;\n    }\n  }, {\n    key: \"processViewportChange\",\n    value: function processViewportChange(nextProps) {\n      var currentProps = this.props;\n      this.props = nextProps;\n\n      if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n        return false;\n      }\n\n      if (this._isTransitionEnabled(nextProps)) {\n        var startProps = Object.assign({}, currentProps);\n        var endProps = Object.assign({}, nextProps);\n\n        if (this._isTransitionInProgress()) {\n          currentProps.onTransitionInterrupt();\n\n          if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n            Object.assign(startProps, this.state.endProps);\n          } else {\n            Object.assign(startProps, this.state.propsInTransition);\n          }\n\n          if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n            var currentTime = this.time();\n            var x0 = (currentTime - this.state.startTime) / this.state.duration;\n            endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n            endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n            endProps.transitionInterpolator = startProps.transitionInterpolator;\n          }\n        }\n\n        endProps.onTransitionStart();\n\n        this._triggerTransition(startProps, endProps);\n\n        return true;\n      }\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        this._endTransition();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_isTransitionInProgress\",\n    value: function _isTransitionInProgress() {\n      return Boolean(this._animationFrame);\n    }\n  }, {\n    key: \"_isTransitionEnabled\",\n    value: function _isTransitionEnabled(props) {\n      var transitionDuration = props.transitionDuration,\n          transitionInterpolator = props.transitionInterpolator;\n      return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n    }\n  }, {\n    key: \"_isUpdateDueToCurrentTransition\",\n    value: function _isUpdateDueToCurrentTransition(props) {\n      if (this.state.propsInTransition) {\n        return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_shouldIgnoreViewportChange\",\n    value: function _shouldIgnoreViewportChange(currentProps, nextProps) {\n      if (!currentProps) {\n        return true;\n      }\n\n      if (this._isTransitionInProgress()) {\n        return this.state.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n      }\n\n      if (this._isTransitionEnabled(nextProps)) {\n        return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_triggerTransition\",\n    value: function _triggerTransition(startProps, endProps) {\n      assert(this._isTransitionEnabled(endProps));\n\n      if (this._animationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n      }\n\n      var transitionInterpolator = endProps.transitionInterpolator;\n      var duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n\n      if (duration === 0) {\n        return;\n      }\n\n      var initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n      var interactionState = {\n        inTransition: true,\n        isZooming: startProps.zoom !== endProps.zoom,\n        isPanning: startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n        isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n      };\n      this.state = {\n        duration: duration,\n        easing: endProps.transitionEasing,\n        interpolator: endProps.transitionInterpolator,\n        interruption: endProps.transitionInterruption,\n        startTime: this.time(),\n        startProps: initialProps.start,\n        endProps: initialProps.end,\n        animation: null,\n        propsInTransition: {}\n      };\n\n      this._onTransitionFrame();\n\n      this.onStateChange(interactionState);\n    }\n  }, {\n    key: \"_endTransition\",\n    value: function _endTransition() {\n      if (this._animationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n        this._animationFrame = null;\n      }\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n    }\n  }, {\n    key: \"_updateViewport\",\n    value: function _updateViewport() {\n      var currentTime = this.time();\n      var _this$state = this.state,\n          startTime = _this$state.startTime,\n          duration = _this$state.duration,\n          easing = _this$state.easing,\n          interpolator = _this$state.interpolator,\n          startProps = _this$state.startProps,\n          endProps = _this$state.endProps;\n      var shouldEnd = false;\n      var t = (currentTime - startTime) / duration;\n\n      if (t >= 1) {\n        t = 1;\n        shouldEnd = true;\n      }\n\n      t = easing(t);\n      var viewport = interpolator.interpolateProps(startProps, endProps, t);\n      var mapState = new MapState(Object.assign({}, this.props, viewport));\n      this.state.propsInTransition = mapState.getViewportProps();\n      this.onViewportChange(this.state.propsInTransition, this.props);\n\n      if (shouldEnd) {\n        this._endTransition();\n\n        this.props.onTransitionEnd();\n      }\n    }\n  }]);\n\n  return TransitionManager;\n}();\n\n_defineProperty(TransitionManager, \"defaultProps\", DEFAULT_PROPS);\n\nexport { TransitionManager as default };","map":{"version":3,"mappings":"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","names":["assert","LinearInterpolator","MapState","noop","cropEasingFunction","easing","x0","y0","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","opts","_classCallCheck","_defineProperty","_this","_animationFrame","requestAnimationFrame","_onTransitionFrame","_updateViewport","props","onViewportChange","onStateChange","time","getTime","Date","now","state","propsInTransition","nextProps","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","Object","assign","endProps","_isTransitionInProgress","interruption","currentTime","startTime","duration","_triggerTransition","_endTransition","Boolean","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","cancelAnimationFrame","getDuration","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","start","end","animation","shouldEnd","viewport","interpolateProps","mapState","getViewportProps"],"sources":["../../../src/utils/transition-manager.js"],"sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing, x0) {\n  const y0 = easing(x0);\n  return t => (1 / (1 - y0)) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(opts = {}) {\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _animationFrame = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = this.time();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps));\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning:\n        startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: this.time(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n    this._onTransitionFrame();\n    this.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  };\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = this.time();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.onViewportChange(this.state.propsInTransition, this.props);\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}