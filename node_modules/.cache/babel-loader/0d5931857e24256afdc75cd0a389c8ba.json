{"ast":null,"code":"/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","map":{"version":3,"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","hypot","y","i","arguments","length","sqrt"],"sources":["/Users/lavanyagurajada/HOV_old/heartofthevalley/app/client/node_modules/gl-matrix/esm/common.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,OAAO,GAAG,QAAd;AACP,OAAO,IAAIC,UAAU,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GAAsCA,YAAtC,GAAqDC,KAAtE;AACP,OAAO,IAAIC,MAAM,GAAGC,IAAI,CAACC,MAAlB;AACP;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;EACvCP,UAAU,GAAGO,IAAb;AACD;AACD,IAAIC,MAAM,GAAGJ,IAAI,CAACK,EAAL,GAAU,GAAvB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;EAC1B,OAAOA,CAAC,GAAGH,MAAX;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,MAAT,CAAgBD,CAAhB,EAAmBE,CAAnB,EAAsB;EAC3B,OAAOT,IAAI,CAACU,GAAL,CAASH,CAAC,GAAGE,CAAb,KAAmBd,OAAO,GAAGK,IAAI,CAACW,GAAL,CAAS,GAAT,EAAcX,IAAI,CAACU,GAAL,CAASH,CAAT,CAAd,EAA2BP,IAAI,CAACU,GAAL,CAASD,CAAT,CAA3B,CAApC;AACD;AACD,IAAI,CAACT,IAAI,CAACY,KAAV,EAAiBZ,IAAI,CAACY,KAAL,GAAa,YAAY;EACxC,IAAIC,CAAC,GAAG,CAAR;EAAA,IACIC,CAAC,GAAGC,SAAS,CAACC,MADlB;;EAGA,OAAOF,CAAC,EAAR,EAAY;IACVD,CAAC,IAAIE,SAAS,CAACD,CAAD,CAAT,GAAeC,SAAS,CAACD,CAAD,CAA7B;EACD;;EAED,OAAOd,IAAI,CAACiB,IAAL,CAAUJ,CAAV,CAAP;AACD,CATgB"},"metadata":{},"sourceType":"module"}